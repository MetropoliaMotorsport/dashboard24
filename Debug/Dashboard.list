
Dashboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c14  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003eac  08003eac  00013eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003ebc  08003ebc  00013ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003ec0  08003ec0  00013ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08003ec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000a8  24000010  08003ed4  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240000b8  08003ed4  000200b8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000a85d  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000018dd  00000000  00000000  0002a8de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000008b0  00000000  00000000  0002c1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000067b  00000000  00000000  0002ca70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00001dcf  00000000  00000000  0002d0eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000b138  00000000  00000000  0002eeba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00152a3a  00000000  00000000  00039ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000022a0  00000000  00000000  0018ca2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000065  00000000  00000000  0018eccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003e94 	.word	0x08003e94

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08003e94 	.word	0x08003e94

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002de:	f000 fae1 	bl	80008a4 <HAL_Init>
   */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e2:	f000 f829 	bl	8000338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  	 MX_GPIO_Init();
 80002e6:	f000 f8fb 	bl	80004e0 <MX_GPIO_Init>
  	 MX_SPI1_Init();
 80002ea:	f000 f8a3 	bl	8000434 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  	uint8_t tx_data = 0xAA;
 80002ee:	23aa      	movs	r3, #170	; 0xaa
 80002f0:	71bb      	strb	r3, [r7, #6]
    uint8_t rx_data;
    bool anything = 0;
 80002f2:	2300      	movs	r3, #0
 80002f4:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //ST7735_Init();
  while (1)
  {
	  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET); // Set CS pin low to select the slave
 80002f6:	2200      	movs	r2, #0
 80002f8:	2110      	movs	r1, #16
 80002fa:	480d      	ldr	r0, [pc, #52]	; (8000330 <main+0x58>)
 80002fc:	f000 fe28 	bl	8000f50 <HAL_GPIO_WritePin>

	  if(HAL_SPI_TransmitReceive(&hspi1, &tx_data, &rx_data, 1, 500) == HAL_OK)
 8000300:	1d7a      	adds	r2, r7, #5
 8000302:	1db9      	adds	r1, r7, #6
 8000304:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000308:	9300      	str	r3, [sp, #0]
 800030a:	2301      	movs	r3, #1
 800030c:	4809      	ldr	r0, [pc, #36]	; (8000334 <main+0x5c>)
 800030e:	f003 fa8f 	bl	8003830 <HAL_SPI_TransmitReceive>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d101      	bne.n	800031c <main+0x44>
	  {
		// Communication successful
		// You can add further processing or checks here
		anything = 1;
 8000318:	2301      	movs	r3, #1
 800031a:	71fb      	strb	r3, [r7, #7]
	  }
	  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET); // Set CS pin high to deselect the slave
 800031c:	2201      	movs	r2, #1
 800031e:	2110      	movs	r1, #16
 8000320:	4803      	ldr	r0, [pc, #12]	; (8000330 <main+0x58>)
 8000322:	f000 fe15 	bl	8000f50 <HAL_GPIO_WritePin>
	  HAL_Delay(3000);
 8000326:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800032a:	f000 fb4d 	bl	80009c8 <HAL_Delay>
	  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET); // Set CS pin low to select the slave
 800032e:	e7e2      	b.n	80002f6 <main+0x1e>
 8000330:	58020000 	.word	0x58020000
 8000334:	2400002c 	.word	0x2400002c

08000338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b09c      	sub	sp, #112	; 0x70
 800033c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000342:	224c      	movs	r2, #76	; 0x4c
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f003 fd77 	bl	8003e3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2220      	movs	r2, #32
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f003 fd71 	bl	8003e3a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000358:	2002      	movs	r0, #2
 800035a:	f000 fe13 	bl	8000f84 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800035e:	2300      	movs	r3, #0
 8000360:	603b      	str	r3, [r7, #0]
 8000362:	4b32      	ldr	r3, [pc, #200]	; (800042c <SystemClock_Config+0xf4>)
 8000364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000366:	4a31      	ldr	r2, [pc, #196]	; (800042c <SystemClock_Config+0xf4>)
 8000368:	f023 0301 	bic.w	r3, r3, #1
 800036c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800036e:	4b2f      	ldr	r3, [pc, #188]	; (800042c <SystemClock_Config+0xf4>)
 8000370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000372:	f003 0301 	and.w	r3, r3, #1
 8000376:	603b      	str	r3, [r7, #0]
 8000378:	4b2d      	ldr	r3, [pc, #180]	; (8000430 <SystemClock_Config+0xf8>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000380:	4a2b      	ldr	r2, [pc, #172]	; (8000430 <SystemClock_Config+0xf8>)
 8000382:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b29      	ldr	r3, [pc, #164]	; (8000430 <SystemClock_Config+0xf8>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000390:	603b      	str	r3, [r7, #0]
 8000392:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000394:	bf00      	nop
 8000396:	4b26      	ldr	r3, [pc, #152]	; (8000430 <SystemClock_Config+0xf8>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800039e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003a2:	d1f8      	bne.n	8000396 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a4:	2302      	movs	r3, #2
 80003a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003a8:	2301      	movs	r3, #1
 80003aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ac:	2340      	movs	r3, #64	; 0x40
 80003ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b0:	2302      	movs	r3, #2
 80003b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003b4:	2300      	movs	r3, #0
 80003b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80003b8:	2304      	movs	r3, #4
 80003ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 80003bc:	2309      	movs	r3, #9
 80003be:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80003c0:	2302      	movs	r3, #2
 80003c2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80003c4:	2302      	movs	r3, #2
 80003c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003c8:	2302      	movs	r3, #2
 80003ca:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80003cc:	230c      	movs	r3, #12
 80003ce:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80003d0:	2302      	movs	r3, #2
 80003d2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80003d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80003d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003de:	4618      	mov	r0, r3
 80003e0:	f000 fe0a 	bl	8000ff8 <HAL_RCC_OscConfig>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80003ea:	f000 f8f7 	bl	80005dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ee:	233f      	movs	r3, #63	; 0x3f
 80003f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003f2:	2300      	movs	r3, #0
 80003f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000402:	2300      	movs	r3, #0
 8000404:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000406:	2300      	movs	r3, #0
 8000408:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800040a:	2300      	movs	r3, #0
 800040c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	2101      	movs	r1, #1
 8000412:	4618      	mov	r0, r3
 8000414:	f001 fa4a 	bl	80018ac <HAL_RCC_ClockConfig>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800041e:	f000 f8dd 	bl	80005dc <Error_Handler>
  }
}
 8000422:	bf00      	nop
 8000424:	3770      	adds	r7, #112	; 0x70
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	58000400 	.word	0x58000400
 8000430:	58024800 	.word	0x58024800

08000434 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000438:	4b27      	ldr	r3, [pc, #156]	; (80004d8 <MX_SPI1_Init+0xa4>)
 800043a:	4a28      	ldr	r2, [pc, #160]	; (80004dc <MX_SPI1_Init+0xa8>)
 800043c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800043e:	4b26      	ldr	r3, [pc, #152]	; (80004d8 <MX_SPI1_Init+0xa4>)
 8000440:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000444:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000446:	4b24      	ldr	r3, [pc, #144]	; (80004d8 <MX_SPI1_Init+0xa4>)
 8000448:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800044c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800044e:	4b22      	ldr	r3, [pc, #136]	; (80004d8 <MX_SPI1_Init+0xa4>)
 8000450:	2203      	movs	r2, #3
 8000452:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000454:	4b20      	ldr	r3, [pc, #128]	; (80004d8 <MX_SPI1_Init+0xa4>)
 8000456:	2200      	movs	r2, #0
 8000458:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800045a:	4b1f      	ldr	r3, [pc, #124]	; (80004d8 <MX_SPI1_Init+0xa4>)
 800045c:	2200      	movs	r2, #0
 800045e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000460:	4b1d      	ldr	r3, [pc, #116]	; (80004d8 <MX_SPI1_Init+0xa4>)
 8000462:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000466:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000468:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <MX_SPI1_Init+0xa4>)
 800046a:	2200      	movs	r2, #0
 800046c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800046e:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <MX_SPI1_Init+0xa4>)
 8000470:	2200      	movs	r2, #0
 8000472:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000474:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <MX_SPI1_Init+0xa4>)
 8000476:	2200      	movs	r2, #0
 8000478:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800047a:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <MX_SPI1_Init+0xa4>)
 800047c:	2200      	movs	r2, #0
 800047e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000480:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <MX_SPI1_Init+0xa4>)
 8000482:	2200      	movs	r2, #0
 8000484:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000486:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <MX_SPI1_Init+0xa4>)
 8000488:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800048c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800048e:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <MX_SPI1_Init+0xa4>)
 8000490:	2200      	movs	r2, #0
 8000492:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000494:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <MX_SPI1_Init+0xa4>)
 8000496:	2200      	movs	r2, #0
 8000498:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800049a:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <MX_SPI1_Init+0xa4>)
 800049c:	2200      	movs	r2, #0
 800049e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80004a0:	4b0d      	ldr	r3, [pc, #52]	; (80004d8 <MX_SPI1_Init+0xa4>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80004a6:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <MX_SPI1_Init+0xa4>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80004ac:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <MX_SPI1_Init+0xa4>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80004b2:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <MX_SPI1_Init+0xa4>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80004b8:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <MX_SPI1_Init+0xa4>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80004be:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <MX_SPI1_Init+0xa4>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004c4:	4804      	ldr	r0, [pc, #16]	; (80004d8 <MX_SPI1_Init+0xa4>)
 80004c6:	f003 f88f 	bl	80035e8 <HAL_SPI_Init>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80004d0:	f000 f884 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	2400002c 	.word	0x2400002c
 80004dc:	40013000 	.word	0x40013000

080004e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b088      	sub	sp, #32
 80004e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e6:	f107 030c 	add.w	r3, r7, #12
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
 80004f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f6:	4b35      	ldr	r3, [pc, #212]	; (80005cc <MX_GPIO_Init+0xec>)
 80004f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004fc:	4a33      	ldr	r2, [pc, #204]	; (80005cc <MX_GPIO_Init+0xec>)
 80004fe:	f043 0301 	orr.w	r3, r3, #1
 8000502:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000506:	4b31      	ldr	r3, [pc, #196]	; (80005cc <MX_GPIO_Init+0xec>)
 8000508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800050c:	f003 0301 	and.w	r3, r3, #1
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000514:	4b2d      	ldr	r3, [pc, #180]	; (80005cc <MX_GPIO_Init+0xec>)
 8000516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800051a:	4a2c      	ldr	r2, [pc, #176]	; (80005cc <MX_GPIO_Init+0xec>)
 800051c:	f043 0304 	orr.w	r3, r3, #4
 8000520:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000524:	4b29      	ldr	r3, [pc, #164]	; (80005cc <MX_GPIO_Init+0xec>)
 8000526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800052a:	f003 0304 	and.w	r3, r3, #4
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000532:	4b26      	ldr	r3, [pc, #152]	; (80005cc <MX_GPIO_Init+0xec>)
 8000534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000538:	4a24      	ldr	r2, [pc, #144]	; (80005cc <MX_GPIO_Init+0xec>)
 800053a:	f043 0302 	orr.w	r3, r3, #2
 800053e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000542:	4b22      	ldr	r3, [pc, #136]	; (80005cc <MX_GPIO_Init+0xec>)
 8000544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000548:	f003 0302 	and.w	r3, r3, #2
 800054c:	603b      	str	r3, [r7, #0]
 800054e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2110      	movs	r1, #16
 8000554:	481e      	ldr	r0, [pc, #120]	; (80005d0 <MX_GPIO_Init+0xf0>)
 8000556:	f000 fcfb 	bl	8000f50 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	2180      	movs	r1, #128	; 0x80
 800055e:	481d      	ldr	r0, [pc, #116]	; (80005d4 <MX_GPIO_Init+0xf4>)
 8000560:	f000 fcf6 	bl	8000f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	2110      	movs	r1, #16
 8000568:	481b      	ldr	r0, [pc, #108]	; (80005d8 <MX_GPIO_Init+0xf8>)
 800056a:	f000 fcf1 	bl	8000f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ST7735_CS_Pin */
  GPIO_InitStruct.Pin = ST7735_CS_Pin;
 800056e:	2310      	movs	r3, #16
 8000570:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000572:	2301      	movs	r3, #1
 8000574:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057a:	2300      	movs	r3, #0
 800057c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ST7735_CS_GPIO_Port, &GPIO_InitStruct);
 800057e:	f107 030c 	add.w	r3, r7, #12
 8000582:	4619      	mov	r1, r3
 8000584:	4812      	ldr	r0, [pc, #72]	; (80005d0 <MX_GPIO_Init+0xf0>)
 8000586:	f000 fb33 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7735_RES_Pin */
  GPIO_InitStruct.Pin = ST7735_RES_Pin;
 800058a:	2380      	movs	r3, #128	; 0x80
 800058c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058e:	2301      	movs	r3, #1
 8000590:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	2300      	movs	r3, #0
 8000598:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ST7735_RES_GPIO_Port, &GPIO_InitStruct);
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	4619      	mov	r1, r3
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <MX_GPIO_Init+0xf4>)
 80005a2:	f000 fb25 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7735_DC_Pin */
  GPIO_InitStruct.Pin = ST7735_DC_Pin;
 80005a6:	2310      	movs	r3, #16
 80005a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005aa:	2301      	movs	r3, #1
 80005ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ST7735_DC_GPIO_Port, &GPIO_InitStruct);
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	4619      	mov	r1, r3
 80005bc:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MX_GPIO_Init+0xf8>)
 80005be:	f000 fb17 	bl	8000bf0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005c2:	bf00      	nop
 80005c4:	3720      	adds	r7, #32
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	58024400 	.word	0x58024400
 80005d0:	58020000 	.word	0x58020000
 80005d4:	58020800 	.word	0x58020800
 80005d8:	58020400 	.word	0x58020400

080005dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e0:	b672      	cpsid	i
}
 80005e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <Error_Handler+0x8>
	...

080005e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <HAL_MspInit+0x30>)
 80005f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80005f4:	4a08      	ldr	r2, [pc, #32]	; (8000618 <HAL_MspInit+0x30>)
 80005f6:	f043 0302 	orr.w	r3, r3, #2
 80005fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <HAL_MspInit+0x30>)
 8000600:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000604:	f003 0302 	and.w	r3, r3, #2
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	58024400 	.word	0x58024400

0800061c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b0ba      	sub	sp, #232	; 0xe8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000624:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	22c0      	movs	r2, #192	; 0xc0
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f003 fbfc 	bl	8003e3a <memset>
  if(hspi->Instance==SPI1)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a26      	ldr	r2, [pc, #152]	; (80006e0 <HAL_SPI_MspInit+0xc4>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d144      	bne.n	80006d6 <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800064c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000650:	f04f 0300 	mov.w	r3, #0
 8000654:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000658:	2300      	movs	r3, #0
 800065a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	4618      	mov	r0, r3
 8000662:	f001 fc53 	bl	8001f0c <HAL_RCCEx_PeriphCLKConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800066c:	f7ff ffb6 	bl	80005dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <HAL_SPI_MspInit+0xc8>)
 8000672:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000676:	4a1b      	ldr	r2, [pc, #108]	; (80006e4 <HAL_SPI_MspInit+0xc8>)
 8000678:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800067c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000680:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <HAL_SPI_MspInit+0xc8>)
 8000682:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000686:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <HAL_SPI_MspInit+0xc8>)
 8000690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000694:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <HAL_SPI_MspInit+0xc8>)
 8000696:	f043 0302 	orr.w	r3, r3, #2
 800069a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <HAL_SPI_MspInit+0xc8>)
 80006a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a4:	f003 0302 	and.w	r3, r3, #2
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80006ac:	2328      	movs	r3, #40	; 0x28
 80006ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b2:	2302      	movs	r3, #2
 80006b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	2300      	movs	r3, #0
 80006c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006c4:	2305      	movs	r3, #5
 80006c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80006ce:	4619      	mov	r1, r3
 80006d0:	4805      	ldr	r0, [pc, #20]	; (80006e8 <HAL_SPI_MspInit+0xcc>)
 80006d2:	f000 fa8d 	bl	8000bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006d6:	bf00      	nop
 80006d8:	37e8      	adds	r7, #232	; 0xe8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40013000 	.word	0x40013000
 80006e4:	58024400 	.word	0x58024400
 80006e8:	58020400 	.word	0x58020400

080006ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <NMI_Handler+0x4>

080006f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <HardFault_Handler+0x4>

080006f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <MemManage_Handler+0x4>

080006fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000702:	e7fe      	b.n	8000702 <BusFault_Handler+0x4>

08000704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <UsageFault_Handler+0x4>

0800070a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr

08000726 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000738:	f000 f926 	bl	8000988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}

08000740 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000744:	4b37      	ldr	r3, [pc, #220]	; (8000824 <SystemInit+0xe4>)
 8000746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800074a:	4a36      	ldr	r2, [pc, #216]	; (8000824 <SystemInit+0xe4>)
 800074c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000750:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000754:	4b34      	ldr	r3, [pc, #208]	; (8000828 <SystemInit+0xe8>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f003 030f 	and.w	r3, r3, #15
 800075c:	2b06      	cmp	r3, #6
 800075e:	d807      	bhi.n	8000770 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000760:	4b31      	ldr	r3, [pc, #196]	; (8000828 <SystemInit+0xe8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f023 030f 	bic.w	r3, r3, #15
 8000768:	4a2f      	ldr	r2, [pc, #188]	; (8000828 <SystemInit+0xe8>)
 800076a:	f043 0307 	orr.w	r3, r3, #7
 800076e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000770:	4b2e      	ldr	r3, [pc, #184]	; (800082c <SystemInit+0xec>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a2d      	ldr	r2, [pc, #180]	; (800082c <SystemInit+0xec>)
 8000776:	f043 0301 	orr.w	r3, r3, #1
 800077a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800077c:	4b2b      	ldr	r3, [pc, #172]	; (800082c <SystemInit+0xec>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000782:	4b2a      	ldr	r3, [pc, #168]	; (800082c <SystemInit+0xec>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4929      	ldr	r1, [pc, #164]	; (800082c <SystemInit+0xec>)
 8000788:	4b29      	ldr	r3, [pc, #164]	; (8000830 <SystemInit+0xf0>)
 800078a:	4013      	ands	r3, r2
 800078c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800078e:	4b26      	ldr	r3, [pc, #152]	; (8000828 <SystemInit+0xe8>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f003 0308 	and.w	r3, r3, #8
 8000796:	2b00      	cmp	r3, #0
 8000798:	d007      	beq.n	80007aa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800079a:	4b23      	ldr	r3, [pc, #140]	; (8000828 <SystemInit+0xe8>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f023 030f 	bic.w	r3, r3, #15
 80007a2:	4a21      	ldr	r2, [pc, #132]	; (8000828 <SystemInit+0xe8>)
 80007a4:	f043 0307 	orr.w	r3, r3, #7
 80007a8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80007aa:	4b20      	ldr	r3, [pc, #128]	; (800082c <SystemInit+0xec>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80007b0:	4b1e      	ldr	r3, [pc, #120]	; (800082c <SystemInit+0xec>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80007b6:	4b1d      	ldr	r3, [pc, #116]	; (800082c <SystemInit+0xec>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <SystemInit+0xec>)
 80007be:	4a1d      	ldr	r2, [pc, #116]	; (8000834 <SystemInit+0xf4>)
 80007c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <SystemInit+0xec>)
 80007c4:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <SystemInit+0xf8>)
 80007c6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <SystemInit+0xec>)
 80007ca:	4a1c      	ldr	r2, [pc, #112]	; (800083c <SystemInit+0xfc>)
 80007cc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <SystemInit+0xec>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80007d4:	4b15      	ldr	r3, [pc, #84]	; (800082c <SystemInit+0xec>)
 80007d6:	4a19      	ldr	r2, [pc, #100]	; (800083c <SystemInit+0xfc>)
 80007d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <SystemInit+0xec>)
 80007dc:	2200      	movs	r2, #0
 80007de:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <SystemInit+0xec>)
 80007e2:	4a16      	ldr	r2, [pc, #88]	; (800083c <SystemInit+0xfc>)
 80007e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <SystemInit+0xec>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <SystemInit+0xec>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a0e      	ldr	r2, [pc, #56]	; (800082c <SystemInit+0xec>)
 80007f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <SystemInit+0xec>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <SystemInit+0x100>)
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <SystemInit+0x104>)
 8000804:	4013      	ands	r3, r2
 8000806:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800080a:	d202      	bcs.n	8000812 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800080c:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <SystemInit+0x108>)
 800080e:	2201      	movs	r2, #1
 8000810:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <SystemInit+0x10c>)
 8000814:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000818:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	e000ed00 	.word	0xe000ed00
 8000828:	52002000 	.word	0x52002000
 800082c:	58024400 	.word	0x58024400
 8000830:	eaf6ed7f 	.word	0xeaf6ed7f
 8000834:	02020200 	.word	0x02020200
 8000838:	01ff0000 	.word	0x01ff0000
 800083c:	01010280 	.word	0x01010280
 8000840:	5c001000 	.word	0x5c001000
 8000844:	ffff0000 	.word	0xffff0000
 8000848:	51008108 	.word	0x51008108
 800084c:	52004000 	.word	0x52004000

08000850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000888 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000854:	f7ff ff74 	bl	8000740 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000858:	480c      	ldr	r0, [pc, #48]	; (800088c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800085a:	490d      	ldr	r1, [pc, #52]	; (8000890 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800085c:	4a0d      	ldr	r2, [pc, #52]	; (8000894 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000860:	e002      	b.n	8000868 <LoopCopyDataInit>

08000862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000866:	3304      	adds	r3, #4

08000868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800086c:	d3f9      	bcc.n	8000862 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086e:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000870:	4c0a      	ldr	r4, [pc, #40]	; (800089c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000874:	e001      	b.n	800087a <LoopFillZerobss>

08000876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000878:	3204      	adds	r2, #4

0800087a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800087c:	d3fb      	bcc.n	8000876 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800087e:	f003 fae5 	bl	8003e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000882:	f7ff fd29 	bl	80002d8 <main>
  bx  lr
 8000886:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000888:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800088c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000890:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000894:	08003ec4 	.word	0x08003ec4
  ldr r2, =_sbss
 8000898:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800089c:	240000b8 	.word	0x240000b8

080008a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008a0:	e7fe      	b.n	80008a0 <ADC3_IRQHandler>
	...

080008a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008aa:	2003      	movs	r0, #3
 80008ac:	f000 f96e 	bl	8000b8c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80008b0:	f001 f9b2 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 80008b4:	4602      	mov	r2, r0
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <HAL_Init+0x68>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	0a1b      	lsrs	r3, r3, #8
 80008bc:	f003 030f 	and.w	r3, r3, #15
 80008c0:	4913      	ldr	r1, [pc, #76]	; (8000910 <HAL_Init+0x6c>)
 80008c2:	5ccb      	ldrb	r3, [r1, r3]
 80008c4:	f003 031f 	and.w	r3, r3, #31
 80008c8:	fa22 f303 	lsr.w	r3, r2, r3
 80008cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <HAL_Init+0x68>)
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	f003 030f 	and.w	r3, r3, #15
 80008d6:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <HAL_Init+0x6c>)
 80008d8:	5cd3      	ldrb	r3, [r2, r3]
 80008da:	f003 031f 	and.w	r3, r3, #31
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	fa22 f303 	lsr.w	r3, r2, r3
 80008e4:	4a0b      	ldr	r2, [pc, #44]	; (8000914 <HAL_Init+0x70>)
 80008e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80008e8:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <HAL_Init+0x74>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008ee:	200f      	movs	r0, #15
 80008f0:	f000 f814 	bl	800091c <HAL_InitTick>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	e002      	b.n	8000904 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80008fe:	f7ff fe73 	bl	80005e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000902:	2300      	movs	r3, #0
}
 8000904:	4618      	mov	r0, r3
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	58024400 	.word	0x58024400
 8000910:	08003eac 	.word	0x08003eac
 8000914:	24000004 	.word	0x24000004
 8000918:	24000000 	.word	0x24000000

0800091c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <HAL_InitTick+0x60>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d101      	bne.n	8000930 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800092c:	2301      	movs	r3, #1
 800092e:	e021      	b.n	8000974 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000930:	4b13      	ldr	r3, [pc, #76]	; (8000980 <HAL_InitTick+0x64>)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <HAL_InitTick+0x60>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	4619      	mov	r1, r3
 800093a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800093e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000942:	fbb2 f3f3 	udiv	r3, r2, r3
 8000946:	4618      	mov	r0, r3
 8000948:	f000 f945 	bl	8000bd6 <HAL_SYSTICK_Config>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
 8000954:	e00e      	b.n	8000974 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2b0f      	cmp	r3, #15
 800095a:	d80a      	bhi.n	8000972 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800095c:	2200      	movs	r2, #0
 800095e:	6879      	ldr	r1, [r7, #4]
 8000960:	f04f 30ff 	mov.w	r0, #4294967295
 8000964:	f000 f91d 	bl	8000ba2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000968:	4a06      	ldr	r2, [pc, #24]	; (8000984 <HAL_InitTick+0x68>)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800096e:	2300      	movs	r3, #0
 8000970:	e000      	b.n	8000974 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
}
 8000974:	4618      	mov	r0, r3
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2400000c 	.word	0x2400000c
 8000980:	24000000 	.word	0x24000000
 8000984:	24000008 	.word	0x24000008

08000988 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_IncTick+0x20>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	461a      	mov	r2, r3
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_IncTick+0x24>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4413      	add	r3, r2
 8000998:	4a04      	ldr	r2, [pc, #16]	; (80009ac <HAL_IncTick+0x24>)
 800099a:	6013      	str	r3, [r2, #0]
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	2400000c 	.word	0x2400000c
 80009ac:	240000b4 	.word	0x240000b4

080009b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  return uwTick;
 80009b4:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <HAL_GetTick+0x14>)
 80009b6:	681b      	ldr	r3, [r3, #0]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	240000b4 	.word	0x240000b4

080009c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009d0:	f7ff ffee 	bl	80009b0 <HAL_GetTick>
 80009d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e0:	d005      	beq.n	80009ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <HAL_Delay+0x44>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	461a      	mov	r2, r3
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	4413      	add	r3, r2
 80009ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009ee:	bf00      	nop
 80009f0:	f7ff ffde 	bl	80009b0 <HAL_GetTick>
 80009f4:	4602      	mov	r2, r0
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d8f7      	bhi.n	80009f0 <HAL_Delay+0x28>
  {
  }
}
 8000a00:	bf00      	nop
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2400000c 	.word	0x2400000c

08000a10 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a14:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <HAL_GetREVID+0x14>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	0c1b      	lsrs	r3, r3, #16
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	5c001000 	.word	0x5c001000

08000a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a38:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <__NVIC_SetPriorityGrouping+0x40>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a44:	4013      	ands	r3, r2
 8000a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a52:	4313      	orrs	r3, r2
 8000a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a56:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <__NVIC_SetPriorityGrouping+0x40>)
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	60d3      	str	r3, [r2, #12]
}
 8000a5c:	bf00      	nop
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000ed00 	.word	0xe000ed00
 8000a6c:	05fa0000 	.word	0x05fa0000

08000a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a74:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <__NVIC_GetPriorityGrouping+0x18>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	0a1b      	lsrs	r3, r3, #8
 8000a7a:	f003 0307 	and.w	r3, r3, #7
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	6039      	str	r1, [r7, #0]
 8000a96:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	db0a      	blt.n	8000ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	490c      	ldr	r1, [pc, #48]	; (8000ad8 <__NVIC_SetPriority+0x4c>)
 8000aa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aaa:	0112      	lsls	r2, r2, #4
 8000aac:	b2d2      	uxtb	r2, r2
 8000aae:	440b      	add	r3, r1
 8000ab0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab4:	e00a      	b.n	8000acc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4908      	ldr	r1, [pc, #32]	; (8000adc <__NVIC_SetPriority+0x50>)
 8000abc:	88fb      	ldrh	r3, [r7, #6]
 8000abe:	f003 030f 	and.w	r3, r3, #15
 8000ac2:	3b04      	subs	r3, #4
 8000ac4:	0112      	lsls	r2, r2, #4
 8000ac6:	b2d2      	uxtb	r2, r2
 8000ac8:	440b      	add	r3, r1
 8000aca:	761a      	strb	r2, [r3, #24]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000e100 	.word	0xe000e100
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b089      	sub	sp, #36	; 0x24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	f1c3 0307 	rsb	r3, r3, #7
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	bf28      	it	cs
 8000afe:	2304      	movcs	r3, #4
 8000b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3304      	adds	r3, #4
 8000b06:	2b06      	cmp	r3, #6
 8000b08:	d902      	bls.n	8000b10 <NVIC_EncodePriority+0x30>
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3b03      	subs	r3, #3
 8000b0e:	e000      	b.n	8000b12 <NVIC_EncodePriority+0x32>
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	f04f 32ff 	mov.w	r2, #4294967295
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43da      	mvns	r2, r3
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	401a      	ands	r2, r3
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b28:	f04f 31ff 	mov.w	r1, #4294967295
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b32:	43d9      	mvns	r1, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	4313      	orrs	r3, r2
         );
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3724      	adds	r7, #36	; 0x24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
	...

08000b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b58:	d301      	bcc.n	8000b5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e00f      	b.n	8000b7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <SysTick_Config+0x40>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b66:	210f      	movs	r1, #15
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	f7ff ff8e 	bl	8000a8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <SysTick_Config+0x40>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b76:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <SysTick_Config+0x40>)
 8000b78:	2207      	movs	r2, #7
 8000b7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	e000e010 	.word	0xe000e010

08000b8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff ff47 	bl	8000a28 <__NVIC_SetPriorityGrouping>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b086      	sub	sp, #24
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	60b9      	str	r1, [r7, #8]
 8000bac:	607a      	str	r2, [r7, #4]
 8000bae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb0:	f7ff ff5e 	bl	8000a70 <__NVIC_GetPriorityGrouping>
 8000bb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	68b9      	ldr	r1, [r7, #8]
 8000bba:	6978      	ldr	r0, [r7, #20]
 8000bbc:	f7ff ff90 	bl	8000ae0 <NVIC_EncodePriority>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff5f 	bl	8000a8c <__NVIC_SetPriority>
}
 8000bce:	bf00      	nop
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff ffb2 	bl	8000b48 <SysTick_Config>
 8000be4:	4603      	mov	r3, r0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	; 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000bfe:	4b89      	ldr	r3, [pc, #548]	; (8000e24 <HAL_GPIO_Init+0x234>)
 8000c00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c02:	e194      	b.n	8000f2e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	2101      	movs	r1, #1
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c10:	4013      	ands	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f000 8186 	beq.w	8000f28 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f003 0303 	and.w	r3, r3, #3
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d005      	beq.n	8000c34 <HAL_GPIO_Init+0x44>
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f003 0303 	and.w	r3, r3, #3
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d130      	bne.n	8000c96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	2203      	movs	r2, #3
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	68da      	ldr	r2, [r3, #12]
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43db      	mvns	r3, r3
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	4013      	ands	r3, r2
 8000c78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	091b      	lsrs	r3, r3, #4
 8000c80:	f003 0201 	and.w	r2, r3, #1
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 0303 	and.w	r3, r3, #3
 8000c9e:	2b03      	cmp	r3, #3
 8000ca0:	d017      	beq.n	8000cd2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	2203      	movs	r2, #3
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	689a      	ldr	r2, [r3, #8]
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d123      	bne.n	8000d26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	08da      	lsrs	r2, r3, #3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3208      	adds	r2, #8
 8000ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	220f      	movs	r2, #15
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	691a      	ldr	r2, [r3, #16]
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	f003 0307 	and.w	r3, r3, #7
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	08da      	lsrs	r2, r3, #3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3208      	adds	r2, #8
 8000d20:	69b9      	ldr	r1, [r7, #24]
 8000d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	2203      	movs	r2, #3
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43db      	mvns	r3, r3
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 0203 	and.w	r2, r3, #3
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f000 80e0 	beq.w	8000f28 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d68:	4b2f      	ldr	r3, [pc, #188]	; (8000e28 <HAL_GPIO_Init+0x238>)
 8000d6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d6e:	4a2e      	ldr	r2, [pc, #184]	; (8000e28 <HAL_GPIO_Init+0x238>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d78:	4b2b      	ldr	r3, [pc, #172]	; (8000e28 <HAL_GPIO_Init+0x238>)
 8000d7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d86:	4a29      	ldr	r2, [pc, #164]	; (8000e2c <HAL_GPIO_Init+0x23c>)
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	089b      	lsrs	r3, r3, #2
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f003 0303 	and.w	r3, r3, #3
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	220f      	movs	r2, #15
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4013      	ands	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a20      	ldr	r2, [pc, #128]	; (8000e30 <HAL_GPIO_Init+0x240>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d052      	beq.n	8000e58 <HAL_GPIO_Init+0x268>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a1f      	ldr	r2, [pc, #124]	; (8000e34 <HAL_GPIO_Init+0x244>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d031      	beq.n	8000e1e <HAL_GPIO_Init+0x22e>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a1e      	ldr	r2, [pc, #120]	; (8000e38 <HAL_GPIO_Init+0x248>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d02b      	beq.n	8000e1a <HAL_GPIO_Init+0x22a>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a1d      	ldr	r2, [pc, #116]	; (8000e3c <HAL_GPIO_Init+0x24c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d025      	beq.n	8000e16 <HAL_GPIO_Init+0x226>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a1c      	ldr	r2, [pc, #112]	; (8000e40 <HAL_GPIO_Init+0x250>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d01f      	beq.n	8000e12 <HAL_GPIO_Init+0x222>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a1b      	ldr	r2, [pc, #108]	; (8000e44 <HAL_GPIO_Init+0x254>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d019      	beq.n	8000e0e <HAL_GPIO_Init+0x21e>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a1a      	ldr	r2, [pc, #104]	; (8000e48 <HAL_GPIO_Init+0x258>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d013      	beq.n	8000e0a <HAL_GPIO_Init+0x21a>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a19      	ldr	r2, [pc, #100]	; (8000e4c <HAL_GPIO_Init+0x25c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d00d      	beq.n	8000e06 <HAL_GPIO_Init+0x216>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a18      	ldr	r2, [pc, #96]	; (8000e50 <HAL_GPIO_Init+0x260>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d007      	beq.n	8000e02 <HAL_GPIO_Init+0x212>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a17      	ldr	r2, [pc, #92]	; (8000e54 <HAL_GPIO_Init+0x264>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d101      	bne.n	8000dfe <HAL_GPIO_Init+0x20e>
 8000dfa:	2309      	movs	r3, #9
 8000dfc:	e02d      	b.n	8000e5a <HAL_GPIO_Init+0x26a>
 8000dfe:	230a      	movs	r3, #10
 8000e00:	e02b      	b.n	8000e5a <HAL_GPIO_Init+0x26a>
 8000e02:	2308      	movs	r3, #8
 8000e04:	e029      	b.n	8000e5a <HAL_GPIO_Init+0x26a>
 8000e06:	2307      	movs	r3, #7
 8000e08:	e027      	b.n	8000e5a <HAL_GPIO_Init+0x26a>
 8000e0a:	2306      	movs	r3, #6
 8000e0c:	e025      	b.n	8000e5a <HAL_GPIO_Init+0x26a>
 8000e0e:	2305      	movs	r3, #5
 8000e10:	e023      	b.n	8000e5a <HAL_GPIO_Init+0x26a>
 8000e12:	2304      	movs	r3, #4
 8000e14:	e021      	b.n	8000e5a <HAL_GPIO_Init+0x26a>
 8000e16:	2303      	movs	r3, #3
 8000e18:	e01f      	b.n	8000e5a <HAL_GPIO_Init+0x26a>
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	e01d      	b.n	8000e5a <HAL_GPIO_Init+0x26a>
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e01b      	b.n	8000e5a <HAL_GPIO_Init+0x26a>
 8000e22:	bf00      	nop
 8000e24:	58000080 	.word	0x58000080
 8000e28:	58024400 	.word	0x58024400
 8000e2c:	58000400 	.word	0x58000400
 8000e30:	58020000 	.word	0x58020000
 8000e34:	58020400 	.word	0x58020400
 8000e38:	58020800 	.word	0x58020800
 8000e3c:	58020c00 	.word	0x58020c00
 8000e40:	58021000 	.word	0x58021000
 8000e44:	58021400 	.word	0x58021400
 8000e48:	58021800 	.word	0x58021800
 8000e4c:	58021c00 	.word	0x58021c00
 8000e50:	58022000 	.word	0x58022000
 8000e54:	58022400 	.word	0x58022400
 8000e58:	2300      	movs	r3, #0
 8000e5a:	69fa      	ldr	r2, [r7, #28]
 8000e5c:	f002 0203 	and.w	r2, r2, #3
 8000e60:	0092      	lsls	r2, r2, #2
 8000e62:	4093      	lsls	r3, r2
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e6a:	4938      	ldr	r1, [pc, #224]	; (8000f4c <HAL_GPIO_Init+0x35c>)
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	089b      	lsrs	r3, r3, #2
 8000e70:	3302      	adds	r3, #2
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	43db      	mvns	r3, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4013      	ands	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000e9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d003      	beq.n	8000ecc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000ecc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	fa22 f303 	lsr.w	r3, r2, r3
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f47f ae63 	bne.w	8000c04 <HAL_GPIO_Init+0x14>
  }
}
 8000f3e:	bf00      	nop
 8000f40:	bf00      	nop
 8000f42:	3724      	adds	r7, #36	; 0x24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	58000400 	.word	0x58000400

08000f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	807b      	strh	r3, [r7, #2]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f60:	787b      	ldrb	r3, [r7, #1]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f66:	887a      	ldrh	r2, [r7, #2]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000f6c:	e003      	b.n	8000f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f6e:	887b      	ldrh	r3, [r7, #2]
 8000f70:	041a      	lsls	r2, r3, #16
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	619a      	str	r2, [r3, #24]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <HAL_PWREx_ConfigSupply+0x70>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	f003 0304 	and.w	r3, r3, #4
 8000f94:	2b04      	cmp	r3, #4
 8000f96:	d00a      	beq.n	8000fae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000f98:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <HAL_PWREx_ConfigSupply+0x70>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	f003 0307 	and.w	r3, r3, #7
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d001      	beq.n	8000faa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e01f      	b.n	8000fea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e01d      	b.n	8000fea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <HAL_PWREx_ConfigSupply+0x70>)
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	f023 0207 	bic.w	r2, r3, #7
 8000fb6:	490f      	ldr	r1, [pc, #60]	; (8000ff4 <HAL_PWREx_ConfigSupply+0x70>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000fbe:	f7ff fcf7 	bl	80009b0 <HAL_GetTick>
 8000fc2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000fc4:	e009      	b.n	8000fda <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000fc6:	f7ff fcf3 	bl	80009b0 <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fd4:	d901      	bls.n	8000fda <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e007      	b.n	8000fea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_PWREx_ConfigSupply+0x70>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fe6:	d1ee      	bne.n	8000fc6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	58024800 	.word	0x58024800

08000ff8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08c      	sub	sp, #48	; 0x30
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d102      	bne.n	800100c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	f000 bc48 	b.w	800189c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	2b00      	cmp	r3, #0
 8001016:	f000 8088 	beq.w	800112a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800101a:	4b99      	ldr	r3, [pc, #612]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001024:	4b96      	ldr	r3, [pc, #600]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 8001026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800102a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800102c:	2b10      	cmp	r3, #16
 800102e:	d007      	beq.n	8001040 <HAL_RCC_OscConfig+0x48>
 8001030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001032:	2b18      	cmp	r3, #24
 8001034:	d111      	bne.n	800105a <HAL_RCC_OscConfig+0x62>
 8001036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d10c      	bne.n	800105a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001040:	4b8f      	ldr	r3, [pc, #572]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d06d      	beq.n	8001128 <HAL_RCC_OscConfig+0x130>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d169      	bne.n	8001128 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	f000 bc21 	b.w	800189c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001062:	d106      	bne.n	8001072 <HAL_RCC_OscConfig+0x7a>
 8001064:	4b86      	ldr	r3, [pc, #536]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a85      	ldr	r2, [pc, #532]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 800106a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800106e:	6013      	str	r3, [r2, #0]
 8001070:	e02e      	b.n	80010d0 <HAL_RCC_OscConfig+0xd8>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10c      	bne.n	8001094 <HAL_RCC_OscConfig+0x9c>
 800107a:	4b81      	ldr	r3, [pc, #516]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a80      	ldr	r2, [pc, #512]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 8001080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	4b7e      	ldr	r3, [pc, #504]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a7d      	ldr	r2, [pc, #500]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 800108c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	e01d      	b.n	80010d0 <HAL_RCC_OscConfig+0xd8>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800109c:	d10c      	bne.n	80010b8 <HAL_RCC_OscConfig+0xc0>
 800109e:	4b78      	ldr	r3, [pc, #480]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a77      	ldr	r2, [pc, #476]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 80010a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	4b75      	ldr	r3, [pc, #468]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a74      	ldr	r2, [pc, #464]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 80010b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	e00b      	b.n	80010d0 <HAL_RCC_OscConfig+0xd8>
 80010b8:	4b71      	ldr	r3, [pc, #452]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a70      	ldr	r2, [pc, #448]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 80010be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	4b6e      	ldr	r3, [pc, #440]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a6d      	ldr	r2, [pc, #436]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 80010ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d013      	beq.n	8001100 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d8:	f7ff fc6a 	bl	80009b0 <HAL_GetTick>
 80010dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010e0:	f7ff fc66 	bl	80009b0 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b64      	cmp	r3, #100	; 0x64
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e3d4      	b.n	800189c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010f2:	4b63      	ldr	r3, [pc, #396]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d0f0      	beq.n	80010e0 <HAL_RCC_OscConfig+0xe8>
 80010fe:	e014      	b.n	800112a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001100:	f7ff fc56 	bl	80009b0 <HAL_GetTick>
 8001104:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001106:	e008      	b.n	800111a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001108:	f7ff fc52 	bl	80009b0 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b64      	cmp	r3, #100	; 0x64
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e3c0      	b.n	800189c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800111a:	4b59      	ldr	r3, [pc, #356]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f0      	bne.n	8001108 <HAL_RCC_OscConfig+0x110>
 8001126:	e000      	b.n	800112a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 80ca 	beq.w	80012cc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001138:	4b51      	ldr	r3, [pc, #324]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001140:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001142:	4b4f      	ldr	r3, [pc, #316]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 8001144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001146:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001148:	6a3b      	ldr	r3, [r7, #32]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d007      	beq.n	800115e <HAL_RCC_OscConfig+0x166>
 800114e:	6a3b      	ldr	r3, [r7, #32]
 8001150:	2b18      	cmp	r3, #24
 8001152:	d156      	bne.n	8001202 <HAL_RCC_OscConfig+0x20a>
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d151      	bne.n	8001202 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800115e:	4b48      	ldr	r3, [pc, #288]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	2b00      	cmp	r3, #0
 8001168:	d005      	beq.n	8001176 <HAL_RCC_OscConfig+0x17e>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e392      	b.n	800189c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001176:	4b42      	ldr	r3, [pc, #264]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f023 0219 	bic.w	r2, r3, #25
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	493f      	ldr	r1, [pc, #252]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 8001184:	4313      	orrs	r3, r2
 8001186:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001188:	f7ff fc12 	bl	80009b0 <HAL_GetTick>
 800118c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001190:	f7ff fc0e 	bl	80009b0 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e37c      	b.n	800189c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011a2:	4b37      	ldr	r3, [pc, #220]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f0      	beq.n	8001190 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ae:	f7ff fc2f 	bl	8000a10 <HAL_GetREVID>
 80011b2:	4603      	mov	r3, r0
 80011b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d817      	bhi.n	80011ec <HAL_RCC_OscConfig+0x1f4>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	2b40      	cmp	r3, #64	; 0x40
 80011c2:	d108      	bne.n	80011d6 <HAL_RCC_OscConfig+0x1de>
 80011c4:	4b2e      	ldr	r3, [pc, #184]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80011cc:	4a2c      	ldr	r2, [pc, #176]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 80011ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011d4:	e07a      	b.n	80012cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d6:	4b2a      	ldr	r3, [pc, #168]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	031b      	lsls	r3, r3, #12
 80011e4:	4926      	ldr	r1, [pc, #152]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011ea:	e06f      	b.n	80012cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ec:	4b24      	ldr	r3, [pc, #144]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	061b      	lsls	r3, r3, #24
 80011fa:	4921      	ldr	r1, [pc, #132]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001200:	e064      	b.n	80012cc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d047      	beq.n	800129a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f023 0219 	bic.w	r2, r3, #25
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	491a      	ldr	r1, [pc, #104]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 8001218:	4313      	orrs	r3, r2
 800121a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121c:	f7ff fbc8 	bl	80009b0 <HAL_GetTick>
 8001220:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001224:	f7ff fbc4 	bl	80009b0 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e332      	b.n	800189c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0f0      	beq.n	8001224 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001242:	f7ff fbe5 	bl	8000a10 <HAL_GetREVID>
 8001246:	4603      	mov	r3, r0
 8001248:	f241 0203 	movw	r2, #4099	; 0x1003
 800124c:	4293      	cmp	r3, r2
 800124e:	d819      	bhi.n	8001284 <HAL_RCC_OscConfig+0x28c>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	2b40      	cmp	r3, #64	; 0x40
 8001256:	d108      	bne.n	800126a <HAL_RCC_OscConfig+0x272>
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001260:	4a07      	ldr	r2, [pc, #28]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 8001262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001266:	6053      	str	r3, [r2, #4]
 8001268:	e030      	b.n	80012cc <HAL_RCC_OscConfig+0x2d4>
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	031b      	lsls	r3, r3, #12
 8001278:	4901      	ldr	r1, [pc, #4]	; (8001280 <HAL_RCC_OscConfig+0x288>)
 800127a:	4313      	orrs	r3, r2
 800127c:	604b      	str	r3, [r1, #4]
 800127e:	e025      	b.n	80012cc <HAL_RCC_OscConfig+0x2d4>
 8001280:	58024400 	.word	0x58024400
 8001284:	4b9a      	ldr	r3, [pc, #616]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	061b      	lsls	r3, r3, #24
 8001292:	4997      	ldr	r1, [pc, #604]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 8001294:	4313      	orrs	r3, r2
 8001296:	604b      	str	r3, [r1, #4]
 8001298:	e018      	b.n	80012cc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800129a:	4b95      	ldr	r3, [pc, #596]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a94      	ldr	r2, [pc, #592]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 80012a0:	f023 0301 	bic.w	r3, r3, #1
 80012a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a6:	f7ff fb83 	bl	80009b0 <HAL_GetTick>
 80012aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012ac:	e008      	b.n	80012c0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ae:	f7ff fb7f 	bl	80009b0 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e2ed      	b.n	800189c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012c0:	4b8b      	ldr	r3, [pc, #556]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1f0      	bne.n	80012ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0310 	and.w	r3, r3, #16
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f000 80a9 	beq.w	800142c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012da:	4b85      	ldr	r3, [pc, #532]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80012e2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012e4:	4b82      	ldr	r3, [pc, #520]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 80012e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	2b08      	cmp	r3, #8
 80012ee:	d007      	beq.n	8001300 <HAL_RCC_OscConfig+0x308>
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	2b18      	cmp	r3, #24
 80012f4:	d13a      	bne.n	800136c <HAL_RCC_OscConfig+0x374>
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d135      	bne.n	800136c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001300:	4b7b      	ldr	r3, [pc, #492]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001308:	2b00      	cmp	r3, #0
 800130a:	d005      	beq.n	8001318 <HAL_RCC_OscConfig+0x320>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	2b80      	cmp	r3, #128	; 0x80
 8001312:	d001      	beq.n	8001318 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e2c1      	b.n	800189c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001318:	f7ff fb7a 	bl	8000a10 <HAL_GetREVID>
 800131c:	4603      	mov	r3, r0
 800131e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001322:	4293      	cmp	r3, r2
 8001324:	d817      	bhi.n	8001356 <HAL_RCC_OscConfig+0x35e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	2b20      	cmp	r3, #32
 800132c:	d108      	bne.n	8001340 <HAL_RCC_OscConfig+0x348>
 800132e:	4b70      	ldr	r3, [pc, #448]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001336:	4a6e      	ldr	r2, [pc, #440]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 8001338:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800133c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800133e:	e075      	b.n	800142c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001340:	4b6b      	ldr	r3, [pc, #428]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	069b      	lsls	r3, r3, #26
 800134e:	4968      	ldr	r1, [pc, #416]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 8001350:	4313      	orrs	r3, r2
 8001352:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001354:	e06a      	b.n	800142c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001356:	4b66      	ldr	r3, [pc, #408]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	061b      	lsls	r3, r3, #24
 8001364:	4962      	ldr	r1, [pc, #392]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 8001366:	4313      	orrs	r3, r2
 8001368:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800136a:	e05f      	b.n	800142c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69db      	ldr	r3, [r3, #28]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d042      	beq.n	80013fa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001374:	4b5e      	ldr	r3, [pc, #376]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a5d      	ldr	r2, [pc, #372]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 800137a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800137e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001380:	f7ff fb16 	bl	80009b0 <HAL_GetTick>
 8001384:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001388:	f7ff fb12 	bl	80009b0 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e280      	b.n	800189c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800139a:	4b55      	ldr	r3, [pc, #340]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013a6:	f7ff fb33 	bl	8000a10 <HAL_GetREVID>
 80013aa:	4603      	mov	r3, r0
 80013ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d817      	bhi.n	80013e4 <HAL_RCC_OscConfig+0x3ec>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	2b20      	cmp	r3, #32
 80013ba:	d108      	bne.n	80013ce <HAL_RCC_OscConfig+0x3d6>
 80013bc:	4b4c      	ldr	r3, [pc, #304]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80013c4:	4a4a      	ldr	r2, [pc, #296]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 80013c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80013ca:	6053      	str	r3, [r2, #4]
 80013cc:	e02e      	b.n	800142c <HAL_RCC_OscConfig+0x434>
 80013ce:	4b48      	ldr	r3, [pc, #288]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a1b      	ldr	r3, [r3, #32]
 80013da:	069b      	lsls	r3, r3, #26
 80013dc:	4944      	ldr	r1, [pc, #272]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	604b      	str	r3, [r1, #4]
 80013e2:	e023      	b.n	800142c <HAL_RCC_OscConfig+0x434>
 80013e4:	4b42      	ldr	r3, [pc, #264]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	061b      	lsls	r3, r3, #24
 80013f2:	493f      	ldr	r1, [pc, #252]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	60cb      	str	r3, [r1, #12]
 80013f8:	e018      	b.n	800142c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80013fa:	4b3d      	ldr	r3, [pc, #244]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a3c      	ldr	r2, [pc, #240]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 8001400:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001406:	f7ff fad3 	bl	80009b0 <HAL_GetTick>
 800140a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800140e:	f7ff facf 	bl	80009b0 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e23d      	b.n	800189c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001420:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1f0      	bne.n	800140e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	2b00      	cmp	r3, #0
 8001436:	d036      	beq.n	80014a6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d019      	beq.n	8001474 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001440:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 8001442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001444:	4a2a      	ldr	r2, [pc, #168]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144c:	f7ff fab0 	bl	80009b0 <HAL_GetTick>
 8001450:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001454:	f7ff faac 	bl	80009b0 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e21a      	b.n	800189c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001466:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 8001468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f0      	beq.n	8001454 <HAL_RCC_OscConfig+0x45c>
 8001472:	e018      	b.n	80014a6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001474:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 8001476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001478:	4a1d      	ldr	r2, [pc, #116]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 800147a:	f023 0301 	bic.w	r3, r3, #1
 800147e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001480:	f7ff fa96 	bl	80009b0 <HAL_GetTick>
 8001484:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001488:	f7ff fa92 	bl	80009b0 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e200      	b.n	800189c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 800149c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0320 	and.w	r3, r3, #32
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d039      	beq.n	8001526 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d01c      	beq.n	80014f4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a0c      	ldr	r2, [pc, #48]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 80014c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80014c6:	f7ff fa73 	bl	80009b0 <HAL_GetTick>
 80014ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014ce:	f7ff fa6f 	bl	80009b0 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e1dd      	b.n	800189c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <HAL_RCC_OscConfig+0x4f8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0f0      	beq.n	80014ce <HAL_RCC_OscConfig+0x4d6>
 80014ec:	e01b      	b.n	8001526 <HAL_RCC_OscConfig+0x52e>
 80014ee:	bf00      	nop
 80014f0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80014f4:	4b9b      	ldr	r3, [pc, #620]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a9a      	ldr	r2, [pc, #616]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 80014fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001500:	f7ff fa56 	bl	80009b0 <HAL_GetTick>
 8001504:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001508:	f7ff fa52 	bl	80009b0 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e1c0      	b.n	800189c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800151a:	4b92      	ldr	r3, [pc, #584]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 8081 	beq.w	8001636 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001534:	4b8c      	ldr	r3, [pc, #560]	; (8001768 <HAL_RCC_OscConfig+0x770>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a8b      	ldr	r2, [pc, #556]	; (8001768 <HAL_RCC_OscConfig+0x770>)
 800153a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001540:	f7ff fa36 	bl	80009b0 <HAL_GetTick>
 8001544:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001548:	f7ff fa32 	bl	80009b0 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b64      	cmp	r3, #100	; 0x64
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e1a0      	b.n	800189c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800155a:	4b83      	ldr	r3, [pc, #524]	; (8001768 <HAL_RCC_OscConfig+0x770>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d106      	bne.n	800157c <HAL_RCC_OscConfig+0x584>
 800156e:	4b7d      	ldr	r3, [pc, #500]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 8001570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001572:	4a7c      	ldr	r2, [pc, #496]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6713      	str	r3, [r2, #112]	; 0x70
 800157a:	e02d      	b.n	80015d8 <HAL_RCC_OscConfig+0x5e0>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d10c      	bne.n	800159e <HAL_RCC_OscConfig+0x5a6>
 8001584:	4b77      	ldr	r3, [pc, #476]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 8001586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001588:	4a76      	ldr	r2, [pc, #472]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 800158a:	f023 0301 	bic.w	r3, r3, #1
 800158e:	6713      	str	r3, [r2, #112]	; 0x70
 8001590:	4b74      	ldr	r3, [pc, #464]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 8001592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001594:	4a73      	ldr	r2, [pc, #460]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 8001596:	f023 0304 	bic.w	r3, r3, #4
 800159a:	6713      	str	r3, [r2, #112]	; 0x70
 800159c:	e01c      	b.n	80015d8 <HAL_RCC_OscConfig+0x5e0>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b05      	cmp	r3, #5
 80015a4:	d10c      	bne.n	80015c0 <HAL_RCC_OscConfig+0x5c8>
 80015a6:	4b6f      	ldr	r3, [pc, #444]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 80015a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015aa:	4a6e      	ldr	r2, [pc, #440]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	6713      	str	r3, [r2, #112]	; 0x70
 80015b2:	4b6c      	ldr	r3, [pc, #432]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 80015b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b6:	4a6b      	ldr	r2, [pc, #428]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6713      	str	r3, [r2, #112]	; 0x70
 80015be:	e00b      	b.n	80015d8 <HAL_RCC_OscConfig+0x5e0>
 80015c0:	4b68      	ldr	r3, [pc, #416]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 80015c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c4:	4a67      	ldr	r2, [pc, #412]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 80015c6:	f023 0301 	bic.w	r3, r3, #1
 80015ca:	6713      	str	r3, [r2, #112]	; 0x70
 80015cc:	4b65      	ldr	r3, [pc, #404]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 80015ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d0:	4a64      	ldr	r2, [pc, #400]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 80015d2:	f023 0304 	bic.w	r3, r3, #4
 80015d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d015      	beq.n	800160c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e0:	f7ff f9e6 	bl	80009b0 <HAL_GetTick>
 80015e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015e6:	e00a      	b.n	80015fe <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e8:	f7ff f9e2 	bl	80009b0 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e14e      	b.n	800189c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015fe:	4b59      	ldr	r3, [pc, #356]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 8001600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0ee      	beq.n	80015e8 <HAL_RCC_OscConfig+0x5f0>
 800160a:	e014      	b.n	8001636 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160c:	f7ff f9d0 	bl	80009b0 <HAL_GetTick>
 8001610:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001612:	e00a      	b.n	800162a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001614:	f7ff f9cc 	bl	80009b0 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001622:	4293      	cmp	r3, r2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e138      	b.n	800189c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800162a:	4b4e      	ldr	r3, [pc, #312]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 800162c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1ee      	bne.n	8001614 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 812d 	beq.w	800189a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001640:	4b48      	ldr	r3, [pc, #288]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001648:	2b18      	cmp	r3, #24
 800164a:	f000 80bd 	beq.w	80017c8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	2b02      	cmp	r3, #2
 8001654:	f040 809e 	bne.w	8001794 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001658:	4b42      	ldr	r3, [pc, #264]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a41      	ldr	r2, [pc, #260]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 800165e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001662:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001664:	f7ff f9a4 	bl	80009b0 <HAL_GetTick>
 8001668:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800166c:	f7ff f9a0 	bl	80009b0 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e10e      	b.n	800189c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800167e:	4b39      	ldr	r3, [pc, #228]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800168a:	4b36      	ldr	r3, [pc, #216]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 800168c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800168e:	4b37      	ldr	r3, [pc, #220]	; (800176c <HAL_RCC_OscConfig+0x774>)
 8001690:	4013      	ands	r3, r2
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800169a:	0112      	lsls	r2, r2, #4
 800169c:	430a      	orrs	r2, r1
 800169e:	4931      	ldr	r1, [pc, #196]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	628b      	str	r3, [r1, #40]	; 0x28
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a8:	3b01      	subs	r3, #1
 80016aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b2:	3b01      	subs	r3, #1
 80016b4:	025b      	lsls	r3, r3, #9
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016be:	3b01      	subs	r3, #1
 80016c0:	041b      	lsls	r3, r3, #16
 80016c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016cc:	3b01      	subs	r3, #1
 80016ce:	061b      	lsls	r3, r3, #24
 80016d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80016d4:	4923      	ldr	r1, [pc, #140]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80016da:	4b22      	ldr	r3, [pc, #136]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 80016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016de:	4a21      	ldr	r2, [pc, #132]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 80016e0:	f023 0301 	bic.w	r3, r3, #1
 80016e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80016e6:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 80016e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016ea:	4b21      	ldr	r3, [pc, #132]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 80016ec:	4013      	ands	r3, r2
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80016f2:	00d2      	lsls	r2, r2, #3
 80016f4:	491b      	ldr	r1, [pc, #108]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 80016fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fe:	f023 020c 	bic.w	r2, r3, #12
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	4917      	ldr	r1, [pc, #92]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 8001708:	4313      	orrs	r3, r2
 800170a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800170c:	4b15      	ldr	r3, [pc, #84]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	f023 0202 	bic.w	r2, r3, #2
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001718:	4912      	ldr	r1, [pc, #72]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 800171a:	4313      	orrs	r3, r2
 800171c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	4a10      	ldr	r2, [pc, #64]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 8001724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001728:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 800172c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172e:	4a0d      	ldr	r2, [pc, #52]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 8001730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001734:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 8001738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173a:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 800173c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001740:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001742:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 8001744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001746:	4a07      	ldr	r2, [pc, #28]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800174e:	4b05      	ldr	r3, [pc, #20]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a04      	ldr	r2, [pc, #16]	; (8001764 <HAL_RCC_OscConfig+0x76c>)
 8001754:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175a:	f7ff f929 	bl	80009b0 <HAL_GetTick>
 800175e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001760:	e011      	b.n	8001786 <HAL_RCC_OscConfig+0x78e>
 8001762:	bf00      	nop
 8001764:	58024400 	.word	0x58024400
 8001768:	58024800 	.word	0x58024800
 800176c:	fffffc0c 	.word	0xfffffc0c
 8001770:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001774:	f7ff f91c 	bl	80009b0 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e08a      	b.n	800189c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001786:	4b47      	ldr	r3, [pc, #284]	; (80018a4 <HAL_RCC_OscConfig+0x8ac>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0x77c>
 8001792:	e082      	b.n	800189a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001794:	4b43      	ldr	r3, [pc, #268]	; (80018a4 <HAL_RCC_OscConfig+0x8ac>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a42      	ldr	r2, [pc, #264]	; (80018a4 <HAL_RCC_OscConfig+0x8ac>)
 800179a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800179e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a0:	f7ff f906 	bl	80009b0 <HAL_GetTick>
 80017a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a8:	f7ff f902 	bl	80009b0 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e070      	b.n	800189c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017ba:	4b3a      	ldr	r3, [pc, #232]	; (80018a4 <HAL_RCC_OscConfig+0x8ac>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_OscConfig+0x7b0>
 80017c6:	e068      	b.n	800189a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80017c8:	4b36      	ldr	r3, [pc, #216]	; (80018a4 <HAL_RCC_OscConfig+0x8ac>)
 80017ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017cc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80017ce:	4b35      	ldr	r3, [pc, #212]	; (80018a4 <HAL_RCC_OscConfig+0x8ac>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d031      	beq.n	8001840 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	f003 0203 	and.w	r2, r3, #3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d12a      	bne.n	8001840 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d122      	bne.n	8001840 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001806:	429a      	cmp	r2, r3
 8001808:	d11a      	bne.n	8001840 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	0a5b      	lsrs	r3, r3, #9
 800180e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001816:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001818:	429a      	cmp	r2, r3
 800181a:	d111      	bne.n	8001840 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	0c1b      	lsrs	r3, r3, #16
 8001820:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001828:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800182a:	429a      	cmp	r2, r3
 800182c:	d108      	bne.n	8001840 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	0e1b      	lsrs	r3, r3, #24
 8001832:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800183c:	429a      	cmp	r2, r3
 800183e:	d001      	beq.n	8001844 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e02b      	b.n	800189c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001844:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <HAL_RCC_OscConfig+0x8ac>)
 8001846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001848:	08db      	lsrs	r3, r3, #3
 800184a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800184e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	429a      	cmp	r2, r3
 8001858:	d01f      	beq.n	800189a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800185a:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_RCC_OscConfig+0x8ac>)
 800185c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185e:	4a11      	ldr	r2, [pc, #68]	; (80018a4 <HAL_RCC_OscConfig+0x8ac>)
 8001860:	f023 0301 	bic.w	r3, r3, #1
 8001864:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001866:	f7ff f8a3 	bl	80009b0 <HAL_GetTick>
 800186a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800186c:	bf00      	nop
 800186e:	f7ff f89f 	bl	80009b0 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	4293      	cmp	r3, r2
 8001878:	d0f9      	beq.n	800186e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <HAL_RCC_OscConfig+0x8ac>)
 800187c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <HAL_RCC_OscConfig+0x8b0>)
 8001880:	4013      	ands	r3, r2
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001886:	00d2      	lsls	r2, r2, #3
 8001888:	4906      	ldr	r1, [pc, #24]	; (80018a4 <HAL_RCC_OscConfig+0x8ac>)
 800188a:	4313      	orrs	r3, r2
 800188c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800188e:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_RCC_OscConfig+0x8ac>)
 8001890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001892:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <HAL_RCC_OscConfig+0x8ac>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3730      	adds	r7, #48	; 0x30
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	58024400 	.word	0x58024400
 80018a8:	ffff0007 	.word	0xffff0007

080018ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e19c      	b.n	8001bfa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018c0:	4b8a      	ldr	r3, [pc, #552]	; (8001aec <HAL_RCC_ClockConfig+0x240>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 030f 	and.w	r3, r3, #15
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d910      	bls.n	80018f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ce:	4b87      	ldr	r3, [pc, #540]	; (8001aec <HAL_RCC_ClockConfig+0x240>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f023 020f 	bic.w	r2, r3, #15
 80018d6:	4985      	ldr	r1, [pc, #532]	; (8001aec <HAL_RCC_ClockConfig+0x240>)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	4313      	orrs	r3, r2
 80018dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018de:	4b83      	ldr	r3, [pc, #524]	; (8001aec <HAL_RCC_ClockConfig+0x240>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e184      	b.n	8001bfa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d010      	beq.n	800191e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691a      	ldr	r2, [r3, #16]
 8001900:	4b7b      	ldr	r3, [pc, #492]	; (8001af0 <HAL_RCC_ClockConfig+0x244>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001908:	429a      	cmp	r2, r3
 800190a:	d908      	bls.n	800191e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800190c:	4b78      	ldr	r3, [pc, #480]	; (8001af0 <HAL_RCC_ClockConfig+0x244>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	4975      	ldr	r1, [pc, #468]	; (8001af0 <HAL_RCC_ClockConfig+0x244>)
 800191a:	4313      	orrs	r3, r2
 800191c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d010      	beq.n	800194c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695a      	ldr	r2, [r3, #20]
 800192e:	4b70      	ldr	r3, [pc, #448]	; (8001af0 <HAL_RCC_ClockConfig+0x244>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001936:	429a      	cmp	r2, r3
 8001938:	d908      	bls.n	800194c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800193a:	4b6d      	ldr	r3, [pc, #436]	; (8001af0 <HAL_RCC_ClockConfig+0x244>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	496a      	ldr	r1, [pc, #424]	; (8001af0 <HAL_RCC_ClockConfig+0x244>)
 8001948:	4313      	orrs	r3, r2
 800194a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0310 	and.w	r3, r3, #16
 8001954:	2b00      	cmp	r3, #0
 8001956:	d010      	beq.n	800197a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	699a      	ldr	r2, [r3, #24]
 800195c:	4b64      	ldr	r3, [pc, #400]	; (8001af0 <HAL_RCC_ClockConfig+0x244>)
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001964:	429a      	cmp	r2, r3
 8001966:	d908      	bls.n	800197a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001968:	4b61      	ldr	r3, [pc, #388]	; (8001af0 <HAL_RCC_ClockConfig+0x244>)
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	495e      	ldr	r1, [pc, #376]	; (8001af0 <HAL_RCC_ClockConfig+0x244>)
 8001976:	4313      	orrs	r3, r2
 8001978:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0320 	and.w	r3, r3, #32
 8001982:	2b00      	cmp	r3, #0
 8001984:	d010      	beq.n	80019a8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69da      	ldr	r2, [r3, #28]
 800198a:	4b59      	ldr	r3, [pc, #356]	; (8001af0 <HAL_RCC_ClockConfig+0x244>)
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001992:	429a      	cmp	r2, r3
 8001994:	d908      	bls.n	80019a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001996:	4b56      	ldr	r3, [pc, #344]	; (8001af0 <HAL_RCC_ClockConfig+0x244>)
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	4953      	ldr	r1, [pc, #332]	; (8001af0 <HAL_RCC_ClockConfig+0x244>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d010      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	4b4d      	ldr	r3, [pc, #308]	; (8001af0 <HAL_RCC_ClockConfig+0x244>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f003 030f 	and.w	r3, r3, #15
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d908      	bls.n	80019d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c4:	4b4a      	ldr	r3, [pc, #296]	; (8001af0 <HAL_RCC_ClockConfig+0x244>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f023 020f 	bic.w	r2, r3, #15
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	4947      	ldr	r1, [pc, #284]	; (8001af0 <HAL_RCC_ClockConfig+0x244>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d055      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80019e2:	4b43      	ldr	r3, [pc, #268]	; (8001af0 <HAL_RCC_ClockConfig+0x244>)
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	4940      	ldr	r1, [pc, #256]	; (8001af0 <HAL_RCC_ClockConfig+0x244>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d107      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019fc:	4b3c      	ldr	r3, [pc, #240]	; (8001af0 <HAL_RCC_ClockConfig+0x244>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d121      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0f6      	b.n	8001bfa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d107      	bne.n	8001a24 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a14:	4b36      	ldr	r3, [pc, #216]	; (8001af0 <HAL_RCC_ClockConfig+0x244>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d115      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0ea      	b.n	8001bfa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d107      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a2c:	4b30      	ldr	r3, [pc, #192]	; (8001af0 <HAL_RCC_ClockConfig+0x244>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d109      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e0de      	b.n	8001bfa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a3c:	4b2c      	ldr	r3, [pc, #176]	; (8001af0 <HAL_RCC_ClockConfig+0x244>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0d6      	b.n	8001bfa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a4c:	4b28      	ldr	r3, [pc, #160]	; (8001af0 <HAL_RCC_ClockConfig+0x244>)
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	f023 0207 	bic.w	r2, r3, #7
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	4925      	ldr	r1, [pc, #148]	; (8001af0 <HAL_RCC_ClockConfig+0x244>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a5e:	f7fe ffa7 	bl	80009b0 <HAL_GetTick>
 8001a62:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a64:	e00a      	b.n	8001a7c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a66:	f7fe ffa3 	bl	80009b0 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e0be      	b.n	8001bfa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7c:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <HAL_RCC_ClockConfig+0x244>)
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d1eb      	bne.n	8001a66 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d010      	beq.n	8001abc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <HAL_RCC_ClockConfig+0x244>)
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d208      	bcs.n	8001abc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_RCC_ClockConfig+0x244>)
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	f023 020f 	bic.w	r2, r3, #15
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	490e      	ldr	r1, [pc, #56]	; (8001af0 <HAL_RCC_ClockConfig+0x244>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_RCC_ClockConfig+0x240>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 030f 	and.w	r3, r3, #15
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d214      	bcs.n	8001af4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <HAL_RCC_ClockConfig+0x240>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f023 020f 	bic.w	r2, r3, #15
 8001ad2:	4906      	ldr	r1, [pc, #24]	; (8001aec <HAL_RCC_ClockConfig+0x240>)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ada:	4b04      	ldr	r3, [pc, #16]	; (8001aec <HAL_RCC_ClockConfig+0x240>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d005      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e086      	b.n	8001bfa <HAL_RCC_ClockConfig+0x34e>
 8001aec:	52002000 	.word	0x52002000
 8001af0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d010      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691a      	ldr	r2, [r3, #16]
 8001b04:	4b3f      	ldr	r3, [pc, #252]	; (8001c04 <HAL_RCC_ClockConfig+0x358>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d208      	bcs.n	8001b22 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b10:	4b3c      	ldr	r3, [pc, #240]	; (8001c04 <HAL_RCC_ClockConfig+0x358>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	4939      	ldr	r1, [pc, #228]	; (8001c04 <HAL_RCC_ClockConfig+0x358>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d010      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695a      	ldr	r2, [r3, #20]
 8001b32:	4b34      	ldr	r3, [pc, #208]	; (8001c04 <HAL_RCC_ClockConfig+0x358>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d208      	bcs.n	8001b50 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b3e:	4b31      	ldr	r3, [pc, #196]	; (8001c04 <HAL_RCC_ClockConfig+0x358>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	492e      	ldr	r1, [pc, #184]	; (8001c04 <HAL_RCC_ClockConfig+0x358>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d010      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	699a      	ldr	r2, [r3, #24]
 8001b60:	4b28      	ldr	r3, [pc, #160]	; (8001c04 <HAL_RCC_ClockConfig+0x358>)
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d208      	bcs.n	8001b7e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b6c:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <HAL_RCC_ClockConfig+0x358>)
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	4922      	ldr	r1, [pc, #136]	; (8001c04 <HAL_RCC_ClockConfig+0x358>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0320 	and.w	r3, r3, #32
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d010      	beq.n	8001bac <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69da      	ldr	r2, [r3, #28]
 8001b8e:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <HAL_RCC_ClockConfig+0x358>)
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d208      	bcs.n	8001bac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <HAL_RCC_ClockConfig+0x358>)
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	4917      	ldr	r1, [pc, #92]	; (8001c04 <HAL_RCC_ClockConfig+0x358>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bac:	f000 f834 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <HAL_RCC_ClockConfig+0x358>)
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	0a1b      	lsrs	r3, r3, #8
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	4912      	ldr	r1, [pc, #72]	; (8001c08 <HAL_RCC_ClockConfig+0x35c>)
 8001bbe:	5ccb      	ldrb	r3, [r1, r3]
 8001bc0:	f003 031f 	and.w	r3, r3, #31
 8001bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <HAL_RCC_ClockConfig+0x358>)
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	4a0d      	ldr	r2, [pc, #52]	; (8001c08 <HAL_RCC_ClockConfig+0x35c>)
 8001bd4:	5cd3      	ldrb	r3, [r2, r3]
 8001bd6:	f003 031f 	and.w	r3, r3, #31
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001be0:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <HAL_RCC_ClockConfig+0x360>)
 8001be2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001be4:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <HAL_RCC_ClockConfig+0x364>)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <HAL_RCC_ClockConfig+0x368>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fe94 	bl	800091c <HAL_InitTick>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	58024400 	.word	0x58024400
 8001c08:	08003eac 	.word	0x08003eac
 8001c0c:	24000004 	.word	0x24000004
 8001c10:	24000000 	.word	0x24000000
 8001c14:	24000008 	.word	0x24000008

08001c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c1e:	4bb3      	ldr	r3, [pc, #716]	; (8001eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c26:	2b18      	cmp	r3, #24
 8001c28:	f200 8155 	bhi.w	8001ed6 <HAL_RCC_GetSysClockFreq+0x2be>
 8001c2c:	a201      	add	r2, pc, #4	; (adr r2, 8001c34 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c32:	bf00      	nop
 8001c34:	08001c99 	.word	0x08001c99
 8001c38:	08001ed7 	.word	0x08001ed7
 8001c3c:	08001ed7 	.word	0x08001ed7
 8001c40:	08001ed7 	.word	0x08001ed7
 8001c44:	08001ed7 	.word	0x08001ed7
 8001c48:	08001ed7 	.word	0x08001ed7
 8001c4c:	08001ed7 	.word	0x08001ed7
 8001c50:	08001ed7 	.word	0x08001ed7
 8001c54:	08001cbf 	.word	0x08001cbf
 8001c58:	08001ed7 	.word	0x08001ed7
 8001c5c:	08001ed7 	.word	0x08001ed7
 8001c60:	08001ed7 	.word	0x08001ed7
 8001c64:	08001ed7 	.word	0x08001ed7
 8001c68:	08001ed7 	.word	0x08001ed7
 8001c6c:	08001ed7 	.word	0x08001ed7
 8001c70:	08001ed7 	.word	0x08001ed7
 8001c74:	08001cc5 	.word	0x08001cc5
 8001c78:	08001ed7 	.word	0x08001ed7
 8001c7c:	08001ed7 	.word	0x08001ed7
 8001c80:	08001ed7 	.word	0x08001ed7
 8001c84:	08001ed7 	.word	0x08001ed7
 8001c88:	08001ed7 	.word	0x08001ed7
 8001c8c:	08001ed7 	.word	0x08001ed7
 8001c90:	08001ed7 	.word	0x08001ed7
 8001c94:	08001ccb 	.word	0x08001ccb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001c98:	4b94      	ldr	r3, [pc, #592]	; (8001eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0320 	and.w	r3, r3, #32
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d009      	beq.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001ca4:	4b91      	ldr	r3, [pc, #580]	; (8001eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	08db      	lsrs	r3, r3, #3
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	4a90      	ldr	r2, [pc, #576]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001cb6:	e111      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001cb8:	4b8d      	ldr	r3, [pc, #564]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001cba:	61bb      	str	r3, [r7, #24]
      break;
 8001cbc:	e10e      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001cbe:	4b8d      	ldr	r3, [pc, #564]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001cc0:	61bb      	str	r3, [r7, #24]
      break;
 8001cc2:	e10b      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001cc4:	4b8c      	ldr	r3, [pc, #560]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001cc6:	61bb      	str	r3, [r7, #24]
      break;
 8001cc8:	e108      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001cca:	4b88      	ldr	r3, [pc, #544]	; (8001eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001cd4:	4b85      	ldr	r3, [pc, #532]	; (8001eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cde:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001ce0:	4b82      	ldr	r3, [pc, #520]	; (8001eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001cea:	4b80      	ldr	r3, [pc, #512]	; (8001eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cee:	08db      	lsrs	r3, r3, #3
 8001cf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	fb02 f303 	mul.w	r3, r2, r3
 8001cfa:	ee07 3a90 	vmov	s15, r3
 8001cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d02:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 80e1 	beq.w	8001ed0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	f000 8083 	beq.w	8001e1c <HAL_RCC_GetSysClockFreq+0x204>
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	f200 80a1 	bhi.w	8001e60 <HAL_RCC_GetSysClockFreq+0x248>
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <HAL_RCC_GetSysClockFreq+0x114>
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d056      	beq.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001d2a:	e099      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d2c:	4b6f      	ldr	r3, [pc, #444]	; (8001eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0320 	and.w	r3, r3, #32
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d02d      	beq.n	8001d94 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001d38:	4b6c      	ldr	r3, [pc, #432]	; (8001eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	08db      	lsrs	r3, r3, #3
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	4a6b      	ldr	r2, [pc, #428]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d44:	fa22 f303 	lsr.w	r3, r2, r3
 8001d48:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	ee07 3a90 	vmov	s15, r3
 8001d50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	ee07 3a90 	vmov	s15, r3
 8001d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d62:	4b62      	ldr	r3, [pc, #392]	; (8001eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d6a:	ee07 3a90 	vmov	s15, r3
 8001d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d72:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d76:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001efc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d8e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001d92:	e087      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	ee07 3a90 	vmov	s15, r3
 8001d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d9e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001f00 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001da6:	4b51      	ldr	r3, [pc, #324]	; (8001eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dae:	ee07 3a90 	vmov	s15, r3
 8001db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001db6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dba:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001efc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001dd6:	e065      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	ee07 3a90 	vmov	s15, r3
 8001dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001de2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001f04 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dea:	4b40      	ldr	r3, [pc, #256]	; (8001eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001df2:	ee07 3a90 	vmov	s15, r3
 8001df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dfe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001efc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001e1a:	e043      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	ee07 3a90 	vmov	s15, r3
 8001e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e26:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001f08 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e2e:	4b2f      	ldr	r3, [pc, #188]	; (8001eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e36:	ee07 3a90 	vmov	s15, r3
 8001e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e42:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001efc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001e5e:	e021      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	ee07 3a90 	vmov	s15, r3
 8001e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e6a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001f04 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e72:	4b1e      	ldr	r3, [pc, #120]	; (8001eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e7a:	ee07 3a90 	vmov	s15, r3
 8001e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e82:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e86:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001efc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001ea2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea8:	0a5b      	lsrs	r3, r3, #9
 8001eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001eae:	3301      	adds	r3, #1
 8001eb0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	ee07 3a90 	vmov	s15, r3
 8001eb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ebc:	edd7 6a07 	vldr	s13, [r7, #28]
 8001ec0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ec4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ec8:	ee17 3a90 	vmov	r3, s15
 8001ecc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001ece:	e005      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61bb      	str	r3, [r7, #24]
      break;
 8001ed4:	e002      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001ed6:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001ed8:	61bb      	str	r3, [r7, #24]
      break;
 8001eda:	bf00      	nop
  }

  return sysclockfreq;
 8001edc:	69bb      	ldr	r3, [r7, #24]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3724      	adds	r7, #36	; 0x24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	58024400 	.word	0x58024400
 8001ef0:	03d09000 	.word	0x03d09000
 8001ef4:	003d0900 	.word	0x003d0900
 8001ef8:	017d7840 	.word	0x017d7840
 8001efc:	46000000 	.word	0x46000000
 8001f00:	4c742400 	.word	0x4c742400
 8001f04:	4a742400 	.word	0x4a742400
 8001f08:	4bbebc20 	.word	0x4bbebc20

08001f0c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f10:	b0ca      	sub	sp, #296	; 0x128
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8001f30:	2500      	movs	r5, #0
 8001f32:	ea54 0305 	orrs.w	r3, r4, r5
 8001f36:	d049      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8001f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001f42:	d02f      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8001f44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001f48:	d828      	bhi.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8001f4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f4e:	d01a      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001f50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f54:	d822      	bhi.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001f5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f5e:	d007      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f60:	e01c      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f62:	4bb8      	ldr	r3, [pc, #736]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f66:	4ab7      	ldr	r2, [pc, #732]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8001f6e:	e01a      	b.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8001f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f74:	3308      	adds	r3, #8
 8001f76:	2102      	movs	r1, #2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f001 f9d1 	bl	8003320 <RCCEx_PLL2_Config>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8001f84:	e00f      	b.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8001f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f8a:	3328      	adds	r3, #40	; 0x28
 8001f8c:	2102      	movs	r1, #2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f001 fa78 	bl	8003484 <RCCEx_PLL3_Config>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8001f9a:	e004      	b.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8001fa2:	e000      	b.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8001fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10a      	bne.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001fae:	4ba5      	ldr	r3, [pc, #660]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fb2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8001fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001fba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fbc:	4aa1      	ldr	r2, [pc, #644]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001fbe:	430b      	orrs	r3, r1
 8001fc0:	6513      	str	r3, [r2, #80]	; 0x50
 8001fc2:	e003      	b.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001fc8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8001fd8:	f04f 0900 	mov.w	r9, #0
 8001fdc:	ea58 0309 	orrs.w	r3, r8, r9
 8001fe0:	d047      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8001fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d82a      	bhi.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8001fec:	a201      	add	r2, pc, #4	; (adr r2, 8001ff4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff2:	bf00      	nop
 8001ff4:	08002009 	.word	0x08002009
 8001ff8:	08002017 	.word	0x08002017
 8001ffc:	0800202d 	.word	0x0800202d
 8002000:	0800204b 	.word	0x0800204b
 8002004:	0800204b 	.word	0x0800204b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002008:	4b8e      	ldr	r3, [pc, #568]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	4a8d      	ldr	r2, [pc, #564]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800200e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002012:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002014:	e01a      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800201a:	3308      	adds	r3, #8
 800201c:	2100      	movs	r1, #0
 800201e:	4618      	mov	r0, r3
 8002020:	f001 f97e 	bl	8003320 <RCCEx_PLL2_Config>
 8002024:	4603      	mov	r3, r0
 8002026:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800202a:	e00f      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800202c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002030:	3328      	adds	r3, #40	; 0x28
 8002032:	2100      	movs	r1, #0
 8002034:	4618      	mov	r0, r3
 8002036:	f001 fa25 	bl	8003484 <RCCEx_PLL3_Config>
 800203a:	4603      	mov	r3, r0
 800203c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002040:	e004      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002048:	e000      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800204a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800204c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10a      	bne.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002054:	4b7b      	ldr	r3, [pc, #492]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002058:	f023 0107 	bic.w	r1, r3, #7
 800205c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002062:	4a78      	ldr	r2, [pc, #480]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002064:	430b      	orrs	r3, r1
 8002066:	6513      	str	r3, [r2, #80]	; 0x50
 8002068:	e003      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800206a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800206e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800207e:	f04f 0b00 	mov.w	fp, #0
 8002082:	ea5a 030b 	orrs.w	r3, sl, fp
 8002086:	d04c      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800208c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002092:	d030      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002098:	d829      	bhi.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800209a:	2bc0      	cmp	r3, #192	; 0xc0
 800209c:	d02d      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800209e:	2bc0      	cmp	r3, #192	; 0xc0
 80020a0:	d825      	bhi.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80020a2:	2b80      	cmp	r3, #128	; 0x80
 80020a4:	d018      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80020a6:	2b80      	cmp	r3, #128	; 0x80
 80020a8:	d821      	bhi.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80020ae:	2b40      	cmp	r3, #64	; 0x40
 80020b0:	d007      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80020b2:	e01c      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020b4:	4b63      	ldr	r3, [pc, #396]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	4a62      	ldr	r2, [pc, #392]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80020ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80020c0:	e01c      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80020c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80020c6:	3308      	adds	r3, #8
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f001 f928 	bl	8003320 <RCCEx_PLL2_Config>
 80020d0:	4603      	mov	r3, r0
 80020d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80020d6:	e011      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80020d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80020dc:	3328      	adds	r3, #40	; 0x28
 80020de:	2100      	movs	r1, #0
 80020e0:	4618      	mov	r0, r3
 80020e2:	f001 f9cf 	bl	8003484 <RCCEx_PLL3_Config>
 80020e6:	4603      	mov	r3, r0
 80020e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80020ec:	e006      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80020f4:	e002      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80020f6:	bf00      	nop
 80020f8:	e000      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80020fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80020fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10a      	bne.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002104:	4b4f      	ldr	r3, [pc, #316]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002108:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800210c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002112:	4a4c      	ldr	r2, [pc, #304]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002114:	430b      	orrs	r3, r1
 8002116:	6513      	str	r3, [r2, #80]	; 0x50
 8002118:	e003      	b.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800211a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800211e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800212e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002132:	2300      	movs	r3, #0
 8002134:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002138:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800213c:	460b      	mov	r3, r1
 800213e:	4313      	orrs	r3, r2
 8002140:	d053      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002146:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800214a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800214e:	d035      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002150:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002154:	d82e      	bhi.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002156:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800215a:	d031      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800215c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002160:	d828      	bhi.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002162:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002166:	d01a      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002168:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800216c:	d822      	bhi.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002172:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002176:	d007      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002178:	e01c      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800217a:	4b32      	ldr	r3, [pc, #200]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217e:	4a31      	ldr	r2, [pc, #196]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002184:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002186:	e01c      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800218c:	3308      	adds	r3, #8
 800218e:	2100      	movs	r1, #0
 8002190:	4618      	mov	r0, r3
 8002192:	f001 f8c5 	bl	8003320 <RCCEx_PLL2_Config>
 8002196:	4603      	mov	r3, r0
 8002198:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800219c:	e011      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800219e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80021a2:	3328      	adds	r3, #40	; 0x28
 80021a4:	2100      	movs	r1, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f001 f96c 	bl	8003484 <RCCEx_PLL3_Config>
 80021ac:	4603      	mov	r3, r0
 80021ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80021b2:	e006      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80021ba:	e002      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80021bc:	bf00      	nop
 80021be:	e000      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80021c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80021c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10b      	bne.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80021ca:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80021d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80021d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80021da:	4a1a      	ldr	r2, [pc, #104]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021dc:	430b      	orrs	r3, r1
 80021de:	6593      	str	r3, [r2, #88]	; 0x58
 80021e0:	e003      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80021e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80021ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80021ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80021f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80021fa:	2300      	movs	r3, #0
 80021fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002200:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002204:	460b      	mov	r3, r1
 8002206:	4313      	orrs	r3, r2
 8002208:	d056      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800220a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800220e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002212:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002216:	d038      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002218:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800221c:	d831      	bhi.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800221e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002222:	d034      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002224:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002228:	d82b      	bhi.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800222a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800222e:	d01d      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002230:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002234:	d825      	bhi.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002236:	2b00      	cmp	r3, #0
 8002238:	d006      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800223a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800223e:	d00a      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002240:	e01f      	b.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002242:	bf00      	nop
 8002244:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002248:	4ba2      	ldr	r3, [pc, #648]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800224a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224c:	4aa1      	ldr	r2, [pc, #644]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800224e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002252:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002254:	e01c      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800225a:	3308      	adds	r3, #8
 800225c:	2100      	movs	r1, #0
 800225e:	4618      	mov	r0, r3
 8002260:	f001 f85e 	bl	8003320 <RCCEx_PLL2_Config>
 8002264:	4603      	mov	r3, r0
 8002266:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800226a:	e011      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800226c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002270:	3328      	adds	r3, #40	; 0x28
 8002272:	2100      	movs	r1, #0
 8002274:	4618      	mov	r0, r3
 8002276:	f001 f905 	bl	8003484 <RCCEx_PLL3_Config>
 800227a:	4603      	mov	r3, r0
 800227c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002280:	e006      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002288:	e002      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800228a:	bf00      	nop
 800228c:	e000      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800228e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002290:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10b      	bne.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002298:	4b8e      	ldr	r3, [pc, #568]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800229a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80022a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80022a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80022a8:	4a8a      	ldr	r2, [pc, #552]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022aa:	430b      	orrs	r3, r1
 80022ac:	6593      	str	r3, [r2, #88]	; 0x58
 80022ae:	e003      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80022b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80022b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80022bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80022c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80022c8:	2300      	movs	r3, #0
 80022ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80022ce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80022d2:	460b      	mov	r3, r1
 80022d4:	4313      	orrs	r3, r2
 80022d6:	d03a      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80022d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80022dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022de:	2b30      	cmp	r3, #48	; 0x30
 80022e0:	d01f      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80022e2:	2b30      	cmp	r3, #48	; 0x30
 80022e4:	d819      	bhi.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80022e6:	2b20      	cmp	r3, #32
 80022e8:	d00c      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	d815      	bhi.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d019      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80022f2:	2b10      	cmp	r3, #16
 80022f4:	d111      	bne.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022f6:	4b77      	ldr	r3, [pc, #476]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fa:	4a76      	ldr	r2, [pc, #472]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002300:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002302:	e011      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002308:	3308      	adds	r3, #8
 800230a:	2102      	movs	r1, #2
 800230c:	4618      	mov	r0, r3
 800230e:	f001 f807 	bl	8003320 <RCCEx_PLL2_Config>
 8002312:	4603      	mov	r3, r0
 8002314:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002318:	e006      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002320:	e002      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002322:	bf00      	nop
 8002324:	e000      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002326:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002328:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10a      	bne.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002330:	4b68      	ldr	r3, [pc, #416]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002334:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800233c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233e:	4a65      	ldr	r2, [pc, #404]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002340:	430b      	orrs	r3, r1
 8002342:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002344:	e003      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002346:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800234a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800234e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002356:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800235a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800235e:	2300      	movs	r3, #0
 8002360:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002364:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002368:	460b      	mov	r3, r1
 800236a:	4313      	orrs	r3, r2
 800236c:	d051      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800236e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002374:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002378:	d035      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800237a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800237e:	d82e      	bhi.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002380:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002384:	d031      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002386:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800238a:	d828      	bhi.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800238c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002390:	d01a      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002396:	d822      	bhi.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800239c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a0:	d007      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80023a2:	e01c      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023a4:	4b4b      	ldr	r3, [pc, #300]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a8:	4a4a      	ldr	r2, [pc, #296]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80023b0:	e01c      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80023b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023b6:	3308      	adds	r3, #8
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 ffb0 	bl	8003320 <RCCEx_PLL2_Config>
 80023c0:	4603      	mov	r3, r0
 80023c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80023c6:	e011      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80023c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023cc:	3328      	adds	r3, #40	; 0x28
 80023ce:	2100      	movs	r1, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f001 f857 	bl	8003484 <RCCEx_PLL3_Config>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80023dc:	e006      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80023e4:	e002      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80023e6:	bf00      	nop
 80023e8:	e000      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80023ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80023ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10a      	bne.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80023f4:	4b37      	ldr	r3, [pc, #220]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80023fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002402:	4a34      	ldr	r2, [pc, #208]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002404:	430b      	orrs	r3, r1
 8002406:	6513      	str	r3, [r2, #80]	; 0x50
 8002408:	e003      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800240a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800240e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800241e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002422:	2300      	movs	r3, #0
 8002424:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002428:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800242c:	460b      	mov	r3, r1
 800242e:	4313      	orrs	r3, r2
 8002430:	d056      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002438:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800243c:	d033      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800243e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002442:	d82c      	bhi.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002444:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002448:	d02f      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800244a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800244e:	d826      	bhi.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002450:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002454:	d02b      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002456:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800245a:	d820      	bhi.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800245c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002460:	d012      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002462:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002466:	d81a      	bhi.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002468:	2b00      	cmp	r3, #0
 800246a:	d022      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800246c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002470:	d115      	bne.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002476:	3308      	adds	r3, #8
 8002478:	2101      	movs	r1, #1
 800247a:	4618      	mov	r0, r3
 800247c:	f000 ff50 	bl	8003320 <RCCEx_PLL2_Config>
 8002480:	4603      	mov	r3, r0
 8002482:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002486:	e015      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800248c:	3328      	adds	r3, #40	; 0x28
 800248e:	2101      	movs	r1, #1
 8002490:	4618      	mov	r0, r3
 8002492:	f000 fff7 	bl	8003484 <RCCEx_PLL3_Config>
 8002496:	4603      	mov	r3, r0
 8002498:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800249c:	e00a      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80024a4:	e006      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80024a6:	bf00      	nop
 80024a8:	e004      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80024aa:	bf00      	nop
 80024ac:	e002      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80024ae:	bf00      	nop
 80024b0:	e000      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80024b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10d      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80024c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024ca:	4a02      	ldr	r2, [pc, #8]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024cc:	430b      	orrs	r3, r1
 80024ce:	6513      	str	r3, [r2, #80]	; 0x50
 80024d0:	e006      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80024d2:	bf00      	nop
 80024d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80024dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80024e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80024ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80024f0:	2300      	movs	r3, #0
 80024f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80024f6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4313      	orrs	r3, r2
 80024fe:	d055      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002504:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002508:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800250c:	d033      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800250e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002512:	d82c      	bhi.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002518:	d02f      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800251a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800251e:	d826      	bhi.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002520:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002524:	d02b      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002526:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800252a:	d820      	bhi.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800252c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002530:	d012      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002536:	d81a      	bhi.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002538:	2b00      	cmp	r3, #0
 800253a:	d022      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800253c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002540:	d115      	bne.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002546:	3308      	adds	r3, #8
 8002548:	2101      	movs	r1, #1
 800254a:	4618      	mov	r0, r3
 800254c:	f000 fee8 	bl	8003320 <RCCEx_PLL2_Config>
 8002550:	4603      	mov	r3, r0
 8002552:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002556:	e015      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800255c:	3328      	adds	r3, #40	; 0x28
 800255e:	2101      	movs	r1, #1
 8002560:	4618      	mov	r0, r3
 8002562:	f000 ff8f 	bl	8003484 <RCCEx_PLL3_Config>
 8002566:	4603      	mov	r3, r0
 8002568:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800256c:	e00a      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002574:	e006      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002576:	bf00      	nop
 8002578:	e004      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800257a:	bf00      	nop
 800257c:	e002      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800257e:	bf00      	nop
 8002580:	e000      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002582:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002584:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10b      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800258c:	4ba3      	ldr	r3, [pc, #652]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800258e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002590:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002598:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800259c:	4a9f      	ldr	r2, [pc, #636]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800259e:	430b      	orrs	r3, r1
 80025a0:	6593      	str	r3, [r2, #88]	; 0x58
 80025a2:	e003      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80025a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80025ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80025b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80025bc:	2300      	movs	r3, #0
 80025be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80025c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80025c6:	460b      	mov	r3, r1
 80025c8:	4313      	orrs	r3, r2
 80025ca:	d037      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80025cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025d6:	d00e      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80025d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025dc:	d816      	bhi.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d018      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80025e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025e6:	d111      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025e8:	4b8c      	ldr	r3, [pc, #560]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80025ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ec:	4a8b      	ldr	r2, [pc, #556]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80025ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80025f4:	e00f      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80025f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025fa:	3308      	adds	r3, #8
 80025fc:	2101      	movs	r1, #1
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 fe8e 	bl	8003320 <RCCEx_PLL2_Config>
 8002604:	4603      	mov	r3, r0
 8002606:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800260a:	e004      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002612:	e000      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002614:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002616:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10a      	bne.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800261e:	4b7f      	ldr	r3, [pc, #508]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002622:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800262a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262c:	4a7b      	ldr	r2, [pc, #492]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800262e:	430b      	orrs	r3, r1
 8002630:	6513      	str	r3, [r2, #80]	; 0x50
 8002632:	e003      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002634:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002638:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800263c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002644:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002648:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800264c:	2300      	movs	r3, #0
 800264e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002652:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002656:	460b      	mov	r3, r1
 8002658:	4313      	orrs	r3, r2
 800265a:	d039      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800265c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002662:	2b03      	cmp	r3, #3
 8002664:	d81c      	bhi.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002666:	a201      	add	r2, pc, #4	; (adr r2, 800266c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800266c:	080026a9 	.word	0x080026a9
 8002670:	0800267d 	.word	0x0800267d
 8002674:	0800268b 	.word	0x0800268b
 8002678:	080026a9 	.word	0x080026a9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800267c:	4b67      	ldr	r3, [pc, #412]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002680:	4a66      	ldr	r2, [pc, #408]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002686:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002688:	e00f      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800268a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800268e:	3308      	adds	r3, #8
 8002690:	2102      	movs	r1, #2
 8002692:	4618      	mov	r0, r3
 8002694:	f000 fe44 	bl	8003320 <RCCEx_PLL2_Config>
 8002698:	4603      	mov	r3, r0
 800269a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800269e:	e004      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80026a6:	e000      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80026a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10a      	bne.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80026b2:	4b5a      	ldr	r3, [pc, #360]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80026b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b6:	f023 0103 	bic.w	r1, r3, #3
 80026ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c0:	4a56      	ldr	r2, [pc, #344]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80026c2:	430b      	orrs	r3, r1
 80026c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026c6:	e003      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80026cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80026dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026e0:	2300      	movs	r3, #0
 80026e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80026e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80026ea:	460b      	mov	r3, r1
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f000 809f 	beq.w	8002830 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026f2:	4b4b      	ldr	r3, [pc, #300]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a4a      	ldr	r2, [pc, #296]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80026f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026fe:	f7fe f957 	bl	80009b0 <HAL_GetTick>
 8002702:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002706:	e00b      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002708:	f7fe f952 	bl	80009b0 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b64      	cmp	r3, #100	; 0x64
 8002716:	d903      	bls.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800271e:	e005      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002720:	4b3f      	ldr	r3, [pc, #252]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0ed      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800272c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002730:	2b00      	cmp	r3, #0
 8002732:	d179      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002734:	4b39      	ldr	r3, [pc, #228]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002736:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800273c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002740:	4053      	eors	r3, r2
 8002742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002746:	2b00      	cmp	r3, #0
 8002748:	d015      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800274a:	4b34      	ldr	r3, [pc, #208]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002752:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002756:	4b31      	ldr	r3, [pc, #196]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275a:	4a30      	ldr	r2, [pc, #192]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800275c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002760:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002762:	4b2e      	ldr	r3, [pc, #184]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002766:	4a2d      	ldr	r2, [pc, #180]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800276c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800276e:	4a2b      	ldr	r2, [pc, #172]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002770:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002774:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800277a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800277e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002782:	d118      	bne.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7fe f914 	bl	80009b0 <HAL_GetTick>
 8002788:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800278c:	e00d      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278e:	f7fe f90f 	bl	80009b0 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002798:	1ad2      	subs	r2, r2, r3
 800279a:	f241 3388 	movw	r3, #5000	; 0x1388
 800279e:	429a      	cmp	r2, r3
 80027a0:	d903      	bls.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80027a8:	e005      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027aa:	4b1c      	ldr	r3, [pc, #112]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0eb      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80027b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d129      	bne.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80027c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027ce:	d10e      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80027d0:	4b12      	ldr	r3, [pc, #72]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80027d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80027e0:	091a      	lsrs	r2, r3, #4
 80027e2:	4b10      	ldr	r3, [pc, #64]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	4a0d      	ldr	r2, [pc, #52]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027e8:	430b      	orrs	r3, r1
 80027ea:	6113      	str	r3, [r2, #16]
 80027ec:	e005      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80027ee:	4b0b      	ldr	r3, [pc, #44]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	4a0a      	ldr	r2, [pc, #40]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80027f8:	6113      	str	r3, [r2, #16]
 80027fa:	4b08      	ldr	r3, [pc, #32]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027fc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80027fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002802:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800280a:	4a04      	ldr	r2, [pc, #16]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800280c:	430b      	orrs	r3, r1
 800280e:	6713      	str	r3, [r2, #112]	; 0x70
 8002810:	e00e      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002812:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002816:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800281a:	e009      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800281c:	58024400 	.word	0x58024400
 8002820:	58024800 	.word	0x58024800
 8002824:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002828:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800282c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002838:	f002 0301 	and.w	r3, r2, #1
 800283c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002840:	2300      	movs	r3, #0
 8002842:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002846:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800284a:	460b      	mov	r3, r1
 800284c:	4313      	orrs	r3, r2
 800284e:	f000 8089 	beq.w	8002964 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002856:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002858:	2b28      	cmp	r3, #40	; 0x28
 800285a:	d86b      	bhi.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800285c:	a201      	add	r2, pc, #4	; (adr r2, 8002864 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800285e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002862:	bf00      	nop
 8002864:	0800293d 	.word	0x0800293d
 8002868:	08002935 	.word	0x08002935
 800286c:	08002935 	.word	0x08002935
 8002870:	08002935 	.word	0x08002935
 8002874:	08002935 	.word	0x08002935
 8002878:	08002935 	.word	0x08002935
 800287c:	08002935 	.word	0x08002935
 8002880:	08002935 	.word	0x08002935
 8002884:	08002909 	.word	0x08002909
 8002888:	08002935 	.word	0x08002935
 800288c:	08002935 	.word	0x08002935
 8002890:	08002935 	.word	0x08002935
 8002894:	08002935 	.word	0x08002935
 8002898:	08002935 	.word	0x08002935
 800289c:	08002935 	.word	0x08002935
 80028a0:	08002935 	.word	0x08002935
 80028a4:	0800291f 	.word	0x0800291f
 80028a8:	08002935 	.word	0x08002935
 80028ac:	08002935 	.word	0x08002935
 80028b0:	08002935 	.word	0x08002935
 80028b4:	08002935 	.word	0x08002935
 80028b8:	08002935 	.word	0x08002935
 80028bc:	08002935 	.word	0x08002935
 80028c0:	08002935 	.word	0x08002935
 80028c4:	0800293d 	.word	0x0800293d
 80028c8:	08002935 	.word	0x08002935
 80028cc:	08002935 	.word	0x08002935
 80028d0:	08002935 	.word	0x08002935
 80028d4:	08002935 	.word	0x08002935
 80028d8:	08002935 	.word	0x08002935
 80028dc:	08002935 	.word	0x08002935
 80028e0:	08002935 	.word	0x08002935
 80028e4:	0800293d 	.word	0x0800293d
 80028e8:	08002935 	.word	0x08002935
 80028ec:	08002935 	.word	0x08002935
 80028f0:	08002935 	.word	0x08002935
 80028f4:	08002935 	.word	0x08002935
 80028f8:	08002935 	.word	0x08002935
 80028fc:	08002935 	.word	0x08002935
 8002900:	08002935 	.word	0x08002935
 8002904:	0800293d 	.word	0x0800293d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800290c:	3308      	adds	r3, #8
 800290e:	2101      	movs	r1, #1
 8002910:	4618      	mov	r0, r3
 8002912:	f000 fd05 	bl	8003320 <RCCEx_PLL2_Config>
 8002916:	4603      	mov	r3, r0
 8002918:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800291c:	e00f      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800291e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002922:	3328      	adds	r3, #40	; 0x28
 8002924:	2101      	movs	r1, #1
 8002926:	4618      	mov	r0, r3
 8002928:	f000 fdac 	bl	8003484 <RCCEx_PLL3_Config>
 800292c:	4603      	mov	r3, r0
 800292e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002932:	e004      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800293a:	e000      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800293c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800293e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10a      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002946:	4bbf      	ldr	r3, [pc, #764]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800294e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002952:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002954:	4abb      	ldr	r2, [pc, #748]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002956:	430b      	orrs	r3, r1
 8002958:	6553      	str	r3, [r2, #84]	; 0x54
 800295a:	e003      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800295c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002960:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296c:	f002 0302 	and.w	r3, r2, #2
 8002970:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002974:	2300      	movs	r3, #0
 8002976:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800297a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800297e:	460b      	mov	r3, r1
 8002980:	4313      	orrs	r3, r2
 8002982:	d041      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800298a:	2b05      	cmp	r3, #5
 800298c:	d824      	bhi.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800298e:	a201      	add	r2, pc, #4	; (adr r2, 8002994 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8002990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002994:	080029e1 	.word	0x080029e1
 8002998:	080029ad 	.word	0x080029ad
 800299c:	080029c3 	.word	0x080029c3
 80029a0:	080029e1 	.word	0x080029e1
 80029a4:	080029e1 	.word	0x080029e1
 80029a8:	080029e1 	.word	0x080029e1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80029ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029b0:	3308      	adds	r3, #8
 80029b2:	2101      	movs	r1, #1
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 fcb3 	bl	8003320 <RCCEx_PLL2_Config>
 80029ba:	4603      	mov	r3, r0
 80029bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80029c0:	e00f      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80029c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029c6:	3328      	adds	r3, #40	; 0x28
 80029c8:	2101      	movs	r1, #1
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 fd5a 	bl	8003484 <RCCEx_PLL3_Config>
 80029d0:	4603      	mov	r3, r0
 80029d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80029d6:	e004      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80029de:	e000      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80029e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10a      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80029ea:	4b96      	ldr	r3, [pc, #600]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80029ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ee:	f023 0107 	bic.w	r1, r3, #7
 80029f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029f8:	4a92      	ldr	r2, [pc, #584]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80029fa:	430b      	orrs	r3, r1
 80029fc:	6553      	str	r3, [r2, #84]	; 0x54
 80029fe:	e003      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a10:	f002 0304 	and.w	r3, r2, #4
 8002a14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a1e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4313      	orrs	r3, r2
 8002a26:	d044      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a30:	2b05      	cmp	r3, #5
 8002a32:	d825      	bhi.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8002a34:	a201      	add	r2, pc, #4	; (adr r2, 8002a3c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8002a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3a:	bf00      	nop
 8002a3c:	08002a89 	.word	0x08002a89
 8002a40:	08002a55 	.word	0x08002a55
 8002a44:	08002a6b 	.word	0x08002a6b
 8002a48:	08002a89 	.word	0x08002a89
 8002a4c:	08002a89 	.word	0x08002a89
 8002a50:	08002a89 	.word	0x08002a89
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a58:	3308      	adds	r3, #8
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 fc5f 	bl	8003320 <RCCEx_PLL2_Config>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002a68:	e00f      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a6e:	3328      	adds	r3, #40	; 0x28
 8002a70:	2101      	movs	r1, #1
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 fd06 	bl	8003484 <RCCEx_PLL3_Config>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002a7e:	e004      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002a86:	e000      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002a88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10b      	bne.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a92:	4b6c      	ldr	r3, [pc, #432]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a96:	f023 0107 	bic.w	r1, r3, #7
 8002a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aa2:	4a68      	ldr	r2, [pc, #416]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	6593      	str	r3, [r2, #88]	; 0x58
 8002aa8:	e003      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002aae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aba:	f002 0320 	and.w	r3, r2, #32
 8002abe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ac8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002acc:	460b      	mov	r3, r1
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	d055      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ada:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ade:	d033      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8002ae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ae4:	d82c      	bhi.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aea:	d02f      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8002aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af0:	d826      	bhi.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002af2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002af6:	d02b      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8002af8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002afc:	d820      	bhi.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002afe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b02:	d012      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8002b04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b08:	d81a      	bhi.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d022      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8002b0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b12:	d115      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b18:	3308      	adds	r3, #8
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 fbff 	bl	8003320 <RCCEx_PLL2_Config>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002b28:	e015      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b2e:	3328      	adds	r3, #40	; 0x28
 8002b30:	2102      	movs	r1, #2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 fca6 	bl	8003484 <RCCEx_PLL3_Config>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002b46:	e006      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002b48:	bf00      	nop
 8002b4a:	e004      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002b4c:	bf00      	nop
 8002b4e:	e002      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002b50:	bf00      	nop
 8002b52:	e000      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002b54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10b      	bne.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b5e:	4b39      	ldr	r3, [pc, #228]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b62:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6e:	4a35      	ldr	r2, [pc, #212]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002b70:	430b      	orrs	r3, r1
 8002b72:	6553      	str	r3, [r2, #84]	; 0x54
 8002b74:	e003      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b86:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002b8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002b94:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	d058      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ba2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ba6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002baa:	d033      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8002bac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002bb0:	d82c      	bhi.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb6:	d02f      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8002bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bbc:	d826      	bhi.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002bbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002bc2:	d02b      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8002bc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002bc8:	d820      	bhi.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002bca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bce:	d012      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8002bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bd4:	d81a      	bhi.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d022      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8002bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bde:	d115      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002be4:	3308      	adds	r3, #8
 8002be6:	2100      	movs	r1, #0
 8002be8:	4618      	mov	r0, r3
 8002bea:	f000 fb99 	bl	8003320 <RCCEx_PLL2_Config>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002bf4:	e015      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bfa:	3328      	adds	r3, #40	; 0x28
 8002bfc:	2102      	movs	r1, #2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fc40 	bl	8003484 <RCCEx_PLL3_Config>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002c0a:	e00a      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002c12:	e006      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002c14:	bf00      	nop
 8002c16:	e004      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002c18:	bf00      	nop
 8002c1a:	e002      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002c1c:	bf00      	nop
 8002c1e:	e000      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002c20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10e      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c2a:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8002c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c3a:	4a02      	ldr	r2, [pc, #8]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002c3c:	430b      	orrs	r3, r1
 8002c3e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c40:	e006      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8002c42:	bf00      	nop
 8002c44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c58:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002c5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c60:	2300      	movs	r3, #0
 8002c62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c66:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	d055      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8002c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c74:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002c78:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002c7c:	d033      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8002c7e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002c82:	d82c      	bhi.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c88:	d02f      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8002c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c8e:	d826      	bhi.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002c90:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002c94:	d02b      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8002c96:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002c9a:	d820      	bhi.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002c9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ca0:	d012      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8002ca2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ca6:	d81a      	bhi.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d022      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8002cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cb0:	d115      	bne.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cb6:	3308      	adds	r3, #8
 8002cb8:	2100      	movs	r1, #0
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 fb30 	bl	8003320 <RCCEx_PLL2_Config>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002cc6:	e015      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ccc:	3328      	adds	r3, #40	; 0x28
 8002cce:	2102      	movs	r1, #2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f000 fbd7 	bl	8003484 <RCCEx_PLL3_Config>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002cdc:	e00a      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ce4:	e006      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002ce6:	bf00      	nop
 8002ce8:	e004      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002cea:	bf00      	nop
 8002cec:	e002      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002cee:	bf00      	nop
 8002cf0:	e000      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002cf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10b      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002cfc:	4ba1      	ldr	r3, [pc, #644]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d00:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8002d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d0c:	4a9d      	ldr	r2, [pc, #628]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002d0e:	430b      	orrs	r3, r1
 8002d10:	6593      	str	r3, [r2, #88]	; 0x58
 8002d12:	e003      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d24:	f002 0308 	and.w	r3, r2, #8
 8002d28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d32:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8002d36:	460b      	mov	r3, r1
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	d01e      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8002d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d48:	d10c      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d4e:	3328      	adds	r3, #40	; 0x28
 8002d50:	2102      	movs	r1, #2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 fb96 	bl	8003484 <RCCEx_PLL3_Config>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d002      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002d64:	4b87      	ldr	r3, [pc, #540]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d68:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d74:	4a83      	ldr	r2, [pc, #524]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002d76:	430b      	orrs	r3, r1
 8002d78:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d82:	f002 0310 	and.w	r3, r2, #16
 8002d86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002d90:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8002d94:	460b      	mov	r3, r1
 8002d96:	4313      	orrs	r3, r2
 8002d98:	d01e      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8002d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002da2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002da6:	d10c      	bne.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dac:	3328      	adds	r3, #40	; 0x28
 8002dae:	2102      	movs	r1, #2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fb67 	bl	8003484 <RCCEx_PLL3_Config>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d002      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002dc2:	4b70      	ldr	r3, [pc, #448]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dd2:	4a6c      	ldr	r2, [pc, #432]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002dd4:	430b      	orrs	r3, r1
 8002dd6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8002de4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002de8:	2300      	movs	r3, #0
 8002dea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002dee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8002df2:	460b      	mov	r3, r1
 8002df4:	4313      	orrs	r3, r2
 8002df6:	d03e      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8002df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dfc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002e00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e04:	d022      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8002e06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e0a:	d81b      	bhi.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d003      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8002e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e14:	d00b      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8002e16:	e015      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e1c:	3308      	adds	r3, #8
 8002e1e:	2100      	movs	r1, #0
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 fa7d 	bl	8003320 <RCCEx_PLL2_Config>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8002e2c:	e00f      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e32:	3328      	adds	r3, #40	; 0x28
 8002e34:	2102      	movs	r1, #2
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 fb24 	bl	8003484 <RCCEx_PLL3_Config>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8002e42:	e004      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e4a:	e000      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8002e4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10b      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e56:	4b4b      	ldr	r3, [pc, #300]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002e66:	4a47      	ldr	r2, [pc, #284]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e6c:	e003      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8002e82:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e84:	2300      	movs	r3, #0
 8002e86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e88:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	d03b      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8002e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e9e:	d01f      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8002ea0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ea4:	d818      	bhi.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8002ea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eaa:	d003      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8002eac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eb0:	d007      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8002eb2:	e011      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eb4:	4b33      	ldr	r3, [pc, #204]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	4a32      	ldr	r2, [pc, #200]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002eba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ebe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8002ec0:	e00f      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ec6:	3328      	adds	r3, #40	; 0x28
 8002ec8:	2101      	movs	r1, #1
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fada 	bl	8003484 <RCCEx_PLL3_Config>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8002ed6:	e004      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ede:	e000      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8002ee0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10b      	bne.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002eea:	4b26      	ldr	r3, [pc, #152]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efa:	4a22      	ldr	r2, [pc, #136]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002efc:	430b      	orrs	r3, r1
 8002efe:	6553      	str	r3, [r2, #84]	; 0x54
 8002f00:	e003      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f12:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8002f16:	673b      	str	r3, [r7, #112]	; 0x70
 8002f18:	2300      	movs	r3, #0
 8002f1a:	677b      	str	r3, [r7, #116]	; 0x74
 8002f1c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8002f20:	460b      	mov	r3, r1
 8002f22:	4313      	orrs	r3, r2
 8002f24:	d034      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8002f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8002f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f34:	d007      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8002f36:	e011      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f38:	4b12      	ldr	r3, [pc, #72]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	4a11      	ldr	r2, [pc, #68]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8002f44:	e00e      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f4a:	3308      	adds	r3, #8
 8002f4c:	2102      	movs	r1, #2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 f9e6 	bl	8003320 <RCCEx_PLL2_Config>
 8002f54:	4603      	mov	r3, r0
 8002f56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8002f5a:	e003      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002f62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10d      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f7a:	4a02      	ldr	r2, [pc, #8]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f7c:	430b      	orrs	r3, r1
 8002f7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f80:	e006      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8002f82:	bf00      	nop
 8002f84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f98:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8002f9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fa2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	d00c      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fb0:	3328      	adds	r3, #40	; 0x28
 8002fb2:	2102      	movs	r1, #2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 fa65 	bl	8003484 <RCCEx_PLL3_Config>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d002      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fce:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8002fd2:	663b      	str	r3, [r7, #96]	; 0x60
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	667b      	str	r3, [r7, #100]	; 0x64
 8002fd8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	d038      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8002fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fee:	d018      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8002ff0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ff4:	d811      	bhi.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8002ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ffa:	d014      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8002ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003000:	d80b      	bhi.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003002:	2b00      	cmp	r3, #0
 8003004:	d011      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800300a:	d106      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800300c:	4bc3      	ldr	r3, [pc, #780]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	4ac2      	ldr	r2, [pc, #776]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003016:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003018:	e008      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003020:	e004      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003022:	bf00      	nop
 8003024:	e002      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003026:	bf00      	nop
 8003028:	e000      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800302a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800302c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10b      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003034:	4bb9      	ldr	r3, [pc, #740]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003038:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800303c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003040:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003044:	4ab5      	ldr	r2, [pc, #724]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003046:	430b      	orrs	r3, r1
 8003048:	6553      	str	r3, [r2, #84]	; 0x54
 800304a:	e003      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800304c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003050:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003054:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003060:	65bb      	str	r3, [r7, #88]	; 0x58
 8003062:	2300      	movs	r3, #0
 8003064:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003066:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800306a:	460b      	mov	r3, r1
 800306c:	4313      	orrs	r3, r2
 800306e:	d009      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003070:	4baa      	ldr	r3, [pc, #680]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003074:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800307c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800307e:	4aa7      	ldr	r2, [pc, #668]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003080:	430b      	orrs	r3, r1
 8003082:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003090:	653b      	str	r3, [r7, #80]	; 0x50
 8003092:	2300      	movs	r3, #0
 8003094:	657b      	str	r3, [r7, #84]	; 0x54
 8003096:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800309a:	460b      	mov	r3, r1
 800309c:	4313      	orrs	r3, r2
 800309e:	d00a      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80030a0:	4b9e      	ldr	r3, [pc, #632]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80030a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80030b0:	4a9a      	ldr	r2, [pc, #616]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80030b2:	430b      	orrs	r3, r1
 80030b4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030be:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80030c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80030c4:	2300      	movs	r3, #0
 80030c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030c8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80030cc:	460b      	mov	r3, r1
 80030ce:	4313      	orrs	r3, r2
 80030d0:	d009      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030d2:	4b92      	ldr	r3, [pc, #584]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80030d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80030da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030e0:	4a8e      	ldr	r2, [pc, #568]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80030e2:	430b      	orrs	r3, r1
 80030e4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80030e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ee:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80030f2:	643b      	str	r3, [r7, #64]	; 0x40
 80030f4:	2300      	movs	r3, #0
 80030f6:	647b      	str	r3, [r7, #68]	; 0x44
 80030f8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80030fc:	460b      	mov	r3, r1
 80030fe:	4313      	orrs	r3, r2
 8003100:	d00e      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003102:	4b86      	ldr	r3, [pc, #536]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	4a85      	ldr	r2, [pc, #532]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003108:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800310c:	6113      	str	r3, [r2, #16]
 800310e:	4b83      	ldr	r3, [pc, #524]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003110:	6919      	ldr	r1, [r3, #16]
 8003112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003116:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800311a:	4a80      	ldr	r2, [pc, #512]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800311c:	430b      	orrs	r3, r1
 800311e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003128:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800312c:	63bb      	str	r3, [r7, #56]	; 0x38
 800312e:	2300      	movs	r3, #0
 8003130:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003132:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003136:	460b      	mov	r3, r1
 8003138:	4313      	orrs	r3, r2
 800313a:	d009      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800313c:	4b77      	ldr	r3, [pc, #476]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800313e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003140:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314a:	4a74      	ldr	r2, [pc, #464]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800314c:	430b      	orrs	r3, r1
 800314e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003158:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800315c:	633b      	str	r3, [r7, #48]	; 0x30
 800315e:	2300      	movs	r3, #0
 8003160:	637b      	str	r3, [r7, #52]	; 0x34
 8003162:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003166:	460b      	mov	r3, r1
 8003168:	4313      	orrs	r3, r2
 800316a:	d00a      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800316c:	4b6b      	ldr	r3, [pc, #428]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800316e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003170:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800317c:	4a67      	ldr	r2, [pc, #412]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800317e:	430b      	orrs	r3, r1
 8003180:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318a:	2100      	movs	r1, #0
 800318c:	62b9      	str	r1, [r7, #40]	; 0x28
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003194:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003198:	460b      	mov	r3, r1
 800319a:	4313      	orrs	r3, r2
 800319c:	d011      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800319e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031a2:	3308      	adds	r3, #8
 80031a4:	2100      	movs	r1, #0
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 f8ba 	bl	8003320 <RCCEx_PLL2_Config>
 80031ac:	4603      	mov	r3, r0
 80031ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80031b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80031c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ca:	2100      	movs	r1, #0
 80031cc:	6239      	str	r1, [r7, #32]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	627b      	str	r3, [r7, #36]	; 0x24
 80031d4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80031d8:	460b      	mov	r3, r1
 80031da:	4313      	orrs	r3, r2
 80031dc:	d011      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031e2:	3308      	adds	r3, #8
 80031e4:	2101      	movs	r1, #1
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 f89a 	bl	8003320 <RCCEx_PLL2_Config>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80031f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320a:	2100      	movs	r1, #0
 800320c:	61b9      	str	r1, [r7, #24]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	61fb      	str	r3, [r7, #28]
 8003214:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003218:	460b      	mov	r3, r1
 800321a:	4313      	orrs	r3, r2
 800321c:	d011      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800321e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003222:	3308      	adds	r3, #8
 8003224:	2102      	movs	r1, #2
 8003226:	4618      	mov	r0, r3
 8003228:	f000 f87a 	bl	8003320 <RCCEx_PLL2_Config>
 800322c:	4603      	mov	r3, r0
 800322e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003232:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800323a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800323e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324a:	2100      	movs	r1, #0
 800324c:	6139      	str	r1, [r7, #16]
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003258:	460b      	mov	r3, r1
 800325a:	4313      	orrs	r3, r2
 800325c:	d011      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800325e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003262:	3328      	adds	r3, #40	; 0x28
 8003264:	2100      	movs	r1, #0
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f90c 	bl	8003484 <RCCEx_PLL3_Config>
 800326c:	4603      	mov	r3, r0
 800326e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8003272:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800327a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800327e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328a:	2100      	movs	r1, #0
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	f003 0310 	and.w	r3, r3, #16
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003298:	460b      	mov	r3, r1
 800329a:	4313      	orrs	r3, r2
 800329c:	d011      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800329e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032a2:	3328      	adds	r3, #40	; 0x28
 80032a4:	2101      	movs	r1, #1
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 f8ec 	bl	8003484 <RCCEx_PLL3_Config>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80032b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80032c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ca:	2100      	movs	r1, #0
 80032cc:	6039      	str	r1, [r7, #0]
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	607b      	str	r3, [r7, #4]
 80032d4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80032d8:	460b      	mov	r3, r1
 80032da:	4313      	orrs	r3, r2
 80032dc:	d011      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032e2:	3328      	adds	r3, #40	; 0x28
 80032e4:	2102      	movs	r1, #2
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 f8cc 	bl	8003484 <RCCEx_PLL3_Config>
 80032ec:	4603      	mov	r3, r0
 80032ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80032f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8003302:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	e000      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
}
 8003310:	4618      	mov	r0, r3
 8003312:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8003316:	46bd      	mov	sp, r7
 8003318:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800331c:	58024400 	.word	0x58024400

08003320 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800332e:	4b53      	ldr	r3, [pc, #332]	; (800347c <RCCEx_PLL2_Config+0x15c>)
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	2b03      	cmp	r3, #3
 8003338:	d101      	bne.n	800333e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e099      	b.n	8003472 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800333e:	4b4f      	ldr	r3, [pc, #316]	; (800347c <RCCEx_PLL2_Config+0x15c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a4e      	ldr	r2, [pc, #312]	; (800347c <RCCEx_PLL2_Config+0x15c>)
 8003344:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003348:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800334a:	f7fd fb31 	bl	80009b0 <HAL_GetTick>
 800334e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003350:	e008      	b.n	8003364 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003352:	f7fd fb2d 	bl	80009b0 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e086      	b.n	8003472 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003364:	4b45      	ldr	r3, [pc, #276]	; (800347c <RCCEx_PLL2_Config+0x15c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1f0      	bne.n	8003352 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003370:	4b42      	ldr	r3, [pc, #264]	; (800347c <RCCEx_PLL2_Config+0x15c>)
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	031b      	lsls	r3, r3, #12
 800337e:	493f      	ldr	r1, [pc, #252]	; (800347c <RCCEx_PLL2_Config+0x15c>)
 8003380:	4313      	orrs	r3, r2
 8003382:	628b      	str	r3, [r1, #40]	; 0x28
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	3b01      	subs	r3, #1
 800338a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	3b01      	subs	r3, #1
 8003394:	025b      	lsls	r3, r3, #9
 8003396:	b29b      	uxth	r3, r3
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	3b01      	subs	r3, #1
 80033a0:	041b      	lsls	r3, r3, #16
 80033a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	061b      	lsls	r3, r3, #24
 80033b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80033b4:	4931      	ldr	r1, [pc, #196]	; (800347c <RCCEx_PLL2_Config+0x15c>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80033ba:	4b30      	ldr	r3, [pc, #192]	; (800347c <RCCEx_PLL2_Config+0x15c>)
 80033bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	492d      	ldr	r1, [pc, #180]	; (800347c <RCCEx_PLL2_Config+0x15c>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80033cc:	4b2b      	ldr	r3, [pc, #172]	; (800347c <RCCEx_PLL2_Config+0x15c>)
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	f023 0220 	bic.w	r2, r3, #32
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	4928      	ldr	r1, [pc, #160]	; (800347c <RCCEx_PLL2_Config+0x15c>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80033de:	4b27      	ldr	r3, [pc, #156]	; (800347c <RCCEx_PLL2_Config+0x15c>)
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	4a26      	ldr	r2, [pc, #152]	; (800347c <RCCEx_PLL2_Config+0x15c>)
 80033e4:	f023 0310 	bic.w	r3, r3, #16
 80033e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80033ea:	4b24      	ldr	r3, [pc, #144]	; (800347c <RCCEx_PLL2_Config+0x15c>)
 80033ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033ee:	4b24      	ldr	r3, [pc, #144]	; (8003480 <RCCEx_PLL2_Config+0x160>)
 80033f0:	4013      	ands	r3, r2
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	69d2      	ldr	r2, [r2, #28]
 80033f6:	00d2      	lsls	r2, r2, #3
 80033f8:	4920      	ldr	r1, [pc, #128]	; (800347c <RCCEx_PLL2_Config+0x15c>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80033fe:	4b1f      	ldr	r3, [pc, #124]	; (800347c <RCCEx_PLL2_Config+0x15c>)
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	4a1e      	ldr	r2, [pc, #120]	; (800347c <RCCEx_PLL2_Config+0x15c>)
 8003404:	f043 0310 	orr.w	r3, r3, #16
 8003408:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d106      	bne.n	800341e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003410:	4b1a      	ldr	r3, [pc, #104]	; (800347c <RCCEx_PLL2_Config+0x15c>)
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	4a19      	ldr	r2, [pc, #100]	; (800347c <RCCEx_PLL2_Config+0x15c>)
 8003416:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800341a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800341c:	e00f      	b.n	800343e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d106      	bne.n	8003432 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003424:	4b15      	ldr	r3, [pc, #84]	; (800347c <RCCEx_PLL2_Config+0x15c>)
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	4a14      	ldr	r2, [pc, #80]	; (800347c <RCCEx_PLL2_Config+0x15c>)
 800342a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800342e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003430:	e005      	b.n	800343e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003432:	4b12      	ldr	r3, [pc, #72]	; (800347c <RCCEx_PLL2_Config+0x15c>)
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	4a11      	ldr	r2, [pc, #68]	; (800347c <RCCEx_PLL2_Config+0x15c>)
 8003438:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800343c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800343e:	4b0f      	ldr	r3, [pc, #60]	; (800347c <RCCEx_PLL2_Config+0x15c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a0e      	ldr	r2, [pc, #56]	; (800347c <RCCEx_PLL2_Config+0x15c>)
 8003444:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003448:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800344a:	f7fd fab1 	bl	80009b0 <HAL_GetTick>
 800344e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003450:	e008      	b.n	8003464 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003452:	f7fd faad 	bl	80009b0 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e006      	b.n	8003472 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003464:	4b05      	ldr	r3, [pc, #20]	; (800347c <RCCEx_PLL2_Config+0x15c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0f0      	beq.n	8003452 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003470:	7bfb      	ldrb	r3, [r7, #15]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	58024400 	.word	0x58024400
 8003480:	ffff0007 	.word	0xffff0007

08003484 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003492:	4b53      	ldr	r3, [pc, #332]	; (80035e0 <RCCEx_PLL3_Config+0x15c>)
 8003494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003496:	f003 0303 	and.w	r3, r3, #3
 800349a:	2b03      	cmp	r3, #3
 800349c:	d101      	bne.n	80034a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e099      	b.n	80035d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80034a2:	4b4f      	ldr	r3, [pc, #316]	; (80035e0 <RCCEx_PLL3_Config+0x15c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a4e      	ldr	r2, [pc, #312]	; (80035e0 <RCCEx_PLL3_Config+0x15c>)
 80034a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ae:	f7fd fa7f 	bl	80009b0 <HAL_GetTick>
 80034b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80034b4:	e008      	b.n	80034c8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80034b6:	f7fd fa7b 	bl	80009b0 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e086      	b.n	80035d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80034c8:	4b45      	ldr	r3, [pc, #276]	; (80035e0 <RCCEx_PLL3_Config+0x15c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1f0      	bne.n	80034b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80034d4:	4b42      	ldr	r3, [pc, #264]	; (80035e0 <RCCEx_PLL3_Config+0x15c>)
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	051b      	lsls	r3, r3, #20
 80034e2:	493f      	ldr	r1, [pc, #252]	; (80035e0 <RCCEx_PLL3_Config+0x15c>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	628b      	str	r3, [r1, #40]	; 0x28
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	3b01      	subs	r3, #1
 80034ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	025b      	lsls	r3, r3, #9
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	431a      	orrs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	3b01      	subs	r3, #1
 8003504:	041b      	lsls	r3, r3, #16
 8003506:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	3b01      	subs	r3, #1
 8003512:	061b      	lsls	r3, r3, #24
 8003514:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003518:	4931      	ldr	r1, [pc, #196]	; (80035e0 <RCCEx_PLL3_Config+0x15c>)
 800351a:	4313      	orrs	r3, r2
 800351c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800351e:	4b30      	ldr	r3, [pc, #192]	; (80035e0 <RCCEx_PLL3_Config+0x15c>)
 8003520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003522:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	492d      	ldr	r1, [pc, #180]	; (80035e0 <RCCEx_PLL3_Config+0x15c>)
 800352c:	4313      	orrs	r3, r2
 800352e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003530:	4b2b      	ldr	r3, [pc, #172]	; (80035e0 <RCCEx_PLL3_Config+0x15c>)
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	4928      	ldr	r1, [pc, #160]	; (80035e0 <RCCEx_PLL3_Config+0x15c>)
 800353e:	4313      	orrs	r3, r2
 8003540:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003542:	4b27      	ldr	r3, [pc, #156]	; (80035e0 <RCCEx_PLL3_Config+0x15c>)
 8003544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003546:	4a26      	ldr	r2, [pc, #152]	; (80035e0 <RCCEx_PLL3_Config+0x15c>)
 8003548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800354c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800354e:	4b24      	ldr	r3, [pc, #144]	; (80035e0 <RCCEx_PLL3_Config+0x15c>)
 8003550:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003552:	4b24      	ldr	r3, [pc, #144]	; (80035e4 <RCCEx_PLL3_Config+0x160>)
 8003554:	4013      	ands	r3, r2
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	69d2      	ldr	r2, [r2, #28]
 800355a:	00d2      	lsls	r2, r2, #3
 800355c:	4920      	ldr	r1, [pc, #128]	; (80035e0 <RCCEx_PLL3_Config+0x15c>)
 800355e:	4313      	orrs	r3, r2
 8003560:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003562:	4b1f      	ldr	r3, [pc, #124]	; (80035e0 <RCCEx_PLL3_Config+0x15c>)
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	4a1e      	ldr	r2, [pc, #120]	; (80035e0 <RCCEx_PLL3_Config+0x15c>)
 8003568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800356c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d106      	bne.n	8003582 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003574:	4b1a      	ldr	r3, [pc, #104]	; (80035e0 <RCCEx_PLL3_Config+0x15c>)
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	4a19      	ldr	r2, [pc, #100]	; (80035e0 <RCCEx_PLL3_Config+0x15c>)
 800357a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800357e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003580:	e00f      	b.n	80035a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d106      	bne.n	8003596 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003588:	4b15      	ldr	r3, [pc, #84]	; (80035e0 <RCCEx_PLL3_Config+0x15c>)
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	4a14      	ldr	r2, [pc, #80]	; (80035e0 <RCCEx_PLL3_Config+0x15c>)
 800358e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003592:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003594:	e005      	b.n	80035a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003596:	4b12      	ldr	r3, [pc, #72]	; (80035e0 <RCCEx_PLL3_Config+0x15c>)
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	4a11      	ldr	r2, [pc, #68]	; (80035e0 <RCCEx_PLL3_Config+0x15c>)
 800359c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80035a2:	4b0f      	ldr	r3, [pc, #60]	; (80035e0 <RCCEx_PLL3_Config+0x15c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a0e      	ldr	r2, [pc, #56]	; (80035e0 <RCCEx_PLL3_Config+0x15c>)
 80035a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ae:	f7fd f9ff 	bl	80009b0 <HAL_GetTick>
 80035b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80035b4:	e008      	b.n	80035c8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80035b6:	f7fd f9fb 	bl	80009b0 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e006      	b.n	80035d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80035c8:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <RCCEx_PLL3_Config+0x15c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0f0      	beq.n	80035b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	58024400 	.word	0x58024400
 80035e4:	ffff0007 	.word	0xffff0007

080035e8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e10f      	b.n	800381a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a87      	ldr	r2, [pc, #540]	; (8003824 <HAL_SPI_Init+0x23c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d00f      	beq.n	800362a <HAL_SPI_Init+0x42>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a86      	ldr	r2, [pc, #536]	; (8003828 <HAL_SPI_Init+0x240>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d00a      	beq.n	800362a <HAL_SPI_Init+0x42>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a84      	ldr	r2, [pc, #528]	; (800382c <HAL_SPI_Init+0x244>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d005      	beq.n	800362a <HAL_SPI_Init+0x42>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	2b0f      	cmp	r3, #15
 8003624:	d901      	bls.n	800362a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e0f7      	b.n	800381a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fbea 	bl	8003e04 <SPI_GetPacketSize>
 8003630:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a7b      	ldr	r2, [pc, #492]	; (8003824 <HAL_SPI_Init+0x23c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d00c      	beq.n	8003656 <HAL_SPI_Init+0x6e>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a79      	ldr	r2, [pc, #484]	; (8003828 <HAL_SPI_Init+0x240>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d007      	beq.n	8003656 <HAL_SPI_Init+0x6e>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a78      	ldr	r2, [pc, #480]	; (800382c <HAL_SPI_Init+0x244>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d002      	beq.n	8003656 <HAL_SPI_Init+0x6e>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2b08      	cmp	r3, #8
 8003654:	d811      	bhi.n	800367a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800365a:	4a72      	ldr	r2, [pc, #456]	; (8003824 <HAL_SPI_Init+0x23c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d009      	beq.n	8003674 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a70      	ldr	r2, [pc, #448]	; (8003828 <HAL_SPI_Init+0x240>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d004      	beq.n	8003674 <HAL_SPI_Init+0x8c>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a6f      	ldr	r2, [pc, #444]	; (800382c <HAL_SPI_Init+0x244>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d104      	bne.n	800367e <HAL_SPI_Init+0x96>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b10      	cmp	r3, #16
 8003678:	d901      	bls.n	800367e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e0cd      	b.n	800381a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7fc ffc2 	bl	800061c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0201 	bic.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80036ba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036c4:	d119      	bne.n	80036fa <HAL_SPI_Init+0x112>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ce:	d103      	bne.n	80036d8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10c      	bne.n	80036fa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80036e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036e8:	d107      	bne.n	80036fa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00f      	beq.n	8003726 <HAL_SPI_Init+0x13e>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	2b06      	cmp	r3, #6
 800370c:	d90b      	bls.n	8003726 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	e007      	b.n	8003736 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003734:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69da      	ldr	r2, [r3, #28]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373e:	431a      	orrs	r2, r3
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003748:	ea42 0103 	orr.w	r1, r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	431a      	orrs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	431a      	orrs	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	431a      	orrs	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	431a      	orrs	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003796:	ea42 0103 	orr.w	r1, r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d113      	bne.n	80037d6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037c0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037d4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0201 	bic.w	r2, r2, #1
 80037e4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40013000 	.word	0x40013000
 8003828:	40003800 	.word	0x40003800
 800382c:	40003c00 	.word	0x40003c00

08003830 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08c      	sub	sp, #48	; 0x30
 8003834:	af02      	add	r7, sp, #8
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800383e:	2300      	movs	r3, #0
 8003840:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3320      	adds	r3, #32
 800384a:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3330      	adds	r3, #48	; 0x30
 8003852:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800385a:	2b01      	cmp	r3, #1
 800385c:	d101      	bne.n	8003862 <HAL_SPI_TransmitReceive+0x32>
 800385e:	2302      	movs	r3, #2
 8003860:	e1fd      	b.n	8003c5e <HAL_SPI_TransmitReceive+0x42e>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800386a:	f7fd f8a1 	bl	80009b0 <HAL_GetTick>
 800386e:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 8003870:	887b      	ldrh	r3, [r7, #2]
 8003872:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 8003874:	887b      	ldrh	r3, [r7, #2]
 8003876:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b01      	cmp	r3, #1
 8003882:	d009      	beq.n	8003898 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 8003884:	2302      	movs	r3, #2
 8003886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8003892:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003896:	e1e2      	b.n	8003c5e <HAL_SPI_TransmitReceive+0x42e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d005      	beq.n	80038aa <HAL_SPI_TransmitReceive+0x7a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <HAL_SPI_TransmitReceive+0x7a>
 80038a4:	887b      	ldrh	r3, [r7, #2]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d109      	bne.n	80038be <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80038b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038bc:	e1cf      	b.n	8003c5e <HAL_SPI_TransmitReceive+0x42e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2205      	movs	r2, #5
 80038c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	887a      	ldrh	r2, [r7, #2]
 80038d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	887a      	ldrh	r2, [r7, #2]
 80038e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	887a      	ldrh	r2, [r7, #2]
 80038ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	887a      	ldrh	r2, [r7, #2]
 80038f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8003914:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	4b82      	ldr	r3, [pc, #520]	; (8003b28 <HAL_SPI_TransmitReceive+0x2f8>)
 800391e:	4013      	ands	r3, r2
 8003920:	8879      	ldrh	r1, [r7, #2]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	6812      	ldr	r2, [r2, #0]
 8003926:	430b      	orrs	r3, r1
 8003928:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f042 0201 	orr.w	r2, r2, #1
 8003938:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003942:	d107      	bne.n	8003954 <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003952:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	2b0f      	cmp	r3, #15
 800395a:	d970      	bls.n	8003a3e <HAL_SPI_TransmitReceive+0x20e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800395c:	e068      	b.n	8003a30 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b02      	cmp	r3, #2
 800396a:	d11a      	bne.n	80039a2 <HAL_SPI_TransmitReceive+0x172>
 800396c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800396e:	2b00      	cmp	r3, #0
 8003970:	d017      	beq.n	80039a2 <HAL_SPI_TransmitReceive+0x172>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6812      	ldr	r2, [r2, #0]
 800397c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003982:	1d1a      	adds	r2, r3, #4
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80039a0:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695a      	ldr	r2, [r3, #20]
 80039a8:	f248 0308 	movw	r3, #32776	; 0x8008
 80039ac:	4013      	ands	r3, r2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d01a      	beq.n	80039e8 <HAL_SPI_TransmitReceive+0x1b8>
 80039b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d017      	beq.n	80039e8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039c2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039c8:	1d1a      	adds	r2, r3, #4
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	3b01      	subs	r3, #1
 80039d8:	b29a      	uxth	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80039e6:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039e8:	f7fc ffe2 	bl	80009b0 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d803      	bhi.n	8003a00 <HAL_SPI_TransmitReceive+0x1d0>
 80039f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039fe:	d102      	bne.n	8003a06 <HAL_SPI_TransmitReceive+0x1d6>
 8003a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d114      	bne.n	8003a30 <HAL_SPI_TransmitReceive+0x200>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 f92e 	bl	8003c68 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e116      	b.n	8003c5e <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8003a30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d193      	bne.n	800395e <HAL_SPI_TransmitReceive+0x12e>
 8003a36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d190      	bne.n	800395e <HAL_SPI_TransmitReceive+0x12e>
 8003a3c:	e0e8      	b.n	8003c10 <HAL_SPI_TransmitReceive+0x3e0>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	2b07      	cmp	r3, #7
 8003a44:	f240 80de 	bls.w	8003c04 <HAL_SPI_TransmitReceive+0x3d4>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8003a48:	e066      	b.n	8003b18 <HAL_SPI_TransmitReceive+0x2e8>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d119      	bne.n	8003a8c <HAL_SPI_TransmitReceive+0x25c>
 8003a58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d016      	beq.n	8003a8c <HAL_SPI_TransmitReceive+0x25c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a62:	881a      	ldrh	r2, [r3, #0]
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6c:	1c9a      	adds	r2, r3, #2
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003a8a:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d11a      	bne.n	8003ad0 <HAL_SPI_TransmitReceive+0x2a0>
 8003a9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d017      	beq.n	8003ad0 <HAL_SPI_TransmitReceive+0x2a0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	8812      	ldrh	r2, [r2, #0]
 8003aa8:	b292      	uxth	r2, r2
 8003aaa:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ab0:	1c9a      	adds	r2, r3, #2
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003ace:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ad0:	f7fc ff6e 	bl	80009b0 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d803      	bhi.n	8003ae8 <HAL_SPI_TransmitReceive+0x2b8>
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae6:	d102      	bne.n	8003aee <HAL_SPI_TransmitReceive+0x2be>
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d114      	bne.n	8003b18 <HAL_SPI_TransmitReceive+0x2e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 f8ba 	bl	8003c68 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e0a2      	b.n	8003c5e <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8003b18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d195      	bne.n	8003a4a <HAL_SPI_TransmitReceive+0x21a>
 8003b1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d192      	bne.n	8003a4a <HAL_SPI_TransmitReceive+0x21a>
 8003b24:	e074      	b.n	8003c10 <HAL_SPI_TransmitReceive+0x3e0>
 8003b26:	bf00      	nop
 8003b28:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d11b      	bne.n	8003b72 <HAL_SPI_TransmitReceive+0x342>
 8003b3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d018      	beq.n	8003b72 <HAL_SPI_TransmitReceive+0x342>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	3320      	adds	r3, #32
 8003b4a:	7812      	ldrb	r2, [r2, #0]
 8003b4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003b70:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d11d      	bne.n	8003bbc <HAL_SPI_TransmitReceive+0x38c>
 8003b80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d01a      	beq.n	8003bbc <HAL_SPI_TransmitReceive+0x38c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b92:	7812      	ldrb	r2, [r2, #0]
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003bba:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bbc:	f7fc fef8 	bl	80009b0 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d803      	bhi.n	8003bd4 <HAL_SPI_TransmitReceive+0x3a4>
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd2:	d102      	bne.n	8003bda <HAL_SPI_TransmitReceive+0x3aa>
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d114      	bne.n	8003c04 <HAL_SPI_TransmitReceive+0x3d4>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 f844 	bl	8003c68 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e02c      	b.n	8003c5e <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8003c04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d190      	bne.n	8003b2c <HAL_SPI_TransmitReceive+0x2fc>
 8003c0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d18d      	bne.n	8003b2c <HAL_SPI_TransmitReceive+0x2fc>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c16:	2200      	movs	r2, #0
 8003c18:	2108      	movs	r1, #8
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 f8c4 	bl	8003da8 <SPI_WaitOnFlagUntilTimeout>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d007      	beq.n	8003c36 <HAL_SPI_TransmitReceive+0x406>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c2c:	f043 0220 	orr.w	r2, r3, #32
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 f816 	bl	8003c68 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <HAL_SPI_TransmitReceive+0x42a>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e001      	b.n	8003c5e <HAL_SPI_TransmitReceive+0x42e>
  }
  return errorcode;
 8003c5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3728      	adds	r7, #40	; 0x28
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop

08003c68 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699a      	ldr	r2, [r3, #24]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0208 	orr.w	r2, r2, #8
 8003c86:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699a      	ldr	r2, [r3, #24]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0210 	orr.w	r2, r2, #16
 8003c96:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0201 	bic.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6919      	ldr	r1, [r3, #16]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	4b3c      	ldr	r3, [pc, #240]	; (8003da4 <SPI_CloseTransfer+0x13c>)
 8003cb4:	400b      	ands	r3, r1
 8003cb6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003cc6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d014      	beq.n	8003cfe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00f      	beq.n	8003cfe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ce4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	699a      	ldr	r2, [r3, #24]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f042 0220 	orr.w	r2, r2, #32
 8003cfc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	d014      	beq.n	8003d34 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00f      	beq.n	8003d34 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d1a:	f043 0204 	orr.w	r2, r3, #4
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699a      	ldr	r2, [r3, #24]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d32:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00f      	beq.n	8003d5e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d44:	f043 0201 	orr.w	r2, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	699a      	ldr	r2, [r3, #24]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d5c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00f      	beq.n	8003d88 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d6e:	f043 0208 	orr.w	r2, r3, #8
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699a      	ldr	r2, [r3, #24]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d86:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8003d98:	bf00      	nop
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	fffffc90 	.word	0xfffffc90

08003da8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	603b      	str	r3, [r7, #0]
 8003db4:	4613      	mov	r3, r2
 8003db6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8003db8:	e010      	b.n	8003ddc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dba:	f7fc fdf9 	bl	80009b0 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d803      	bhi.n	8003dd2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd0:	d102      	bne.n	8003dd8 <SPI_WaitOnFlagUntilTimeout+0x30>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e00f      	b.n	8003dfc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695a      	ldr	r2, [r3, #20]
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	4013      	ands	r3, r2
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	bf0c      	ite	eq
 8003dec:	2301      	moveq	r3, #1
 8003dee:	2300      	movne	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	461a      	mov	r2, r3
 8003df4:	79fb      	ldrb	r3, [r7, #7]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d0df      	beq.n	8003dba <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e10:	095b      	lsrs	r3, r3, #5
 8003e12:	3301      	adds	r3, #1
 8003e14:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	3307      	adds	r3, #7
 8003e22:	08db      	lsrs	r3, r3, #3
 8003e24:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	fb02 f303 	mul.w	r3, r2, r3
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <memset>:
 8003e3a:	4402      	add	r2, r0
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d100      	bne.n	8003e44 <memset+0xa>
 8003e42:	4770      	bx	lr
 8003e44:	f803 1b01 	strb.w	r1, [r3], #1
 8003e48:	e7f9      	b.n	8003e3e <memset+0x4>
	...

08003e4c <__libc_init_array>:
 8003e4c:	b570      	push	{r4, r5, r6, lr}
 8003e4e:	4d0d      	ldr	r5, [pc, #52]	; (8003e84 <__libc_init_array+0x38>)
 8003e50:	4c0d      	ldr	r4, [pc, #52]	; (8003e88 <__libc_init_array+0x3c>)
 8003e52:	1b64      	subs	r4, r4, r5
 8003e54:	10a4      	asrs	r4, r4, #2
 8003e56:	2600      	movs	r6, #0
 8003e58:	42a6      	cmp	r6, r4
 8003e5a:	d109      	bne.n	8003e70 <__libc_init_array+0x24>
 8003e5c:	4d0b      	ldr	r5, [pc, #44]	; (8003e8c <__libc_init_array+0x40>)
 8003e5e:	4c0c      	ldr	r4, [pc, #48]	; (8003e90 <__libc_init_array+0x44>)
 8003e60:	f000 f818 	bl	8003e94 <_init>
 8003e64:	1b64      	subs	r4, r4, r5
 8003e66:	10a4      	asrs	r4, r4, #2
 8003e68:	2600      	movs	r6, #0
 8003e6a:	42a6      	cmp	r6, r4
 8003e6c:	d105      	bne.n	8003e7a <__libc_init_array+0x2e>
 8003e6e:	bd70      	pop	{r4, r5, r6, pc}
 8003e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e74:	4798      	blx	r3
 8003e76:	3601      	adds	r6, #1
 8003e78:	e7ee      	b.n	8003e58 <__libc_init_array+0xc>
 8003e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e7e:	4798      	blx	r3
 8003e80:	3601      	adds	r6, #1
 8003e82:	e7f2      	b.n	8003e6a <__libc_init_array+0x1e>
 8003e84:	08003ebc 	.word	0x08003ebc
 8003e88:	08003ebc 	.word	0x08003ebc
 8003e8c:	08003ebc 	.word	0x08003ebc
 8003e90:	08003ec0 	.word	0x08003ec0

08003e94 <_init>:
 8003e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e96:	bf00      	nop
 8003e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e9a:	bc08      	pop	{r3}
 8003e9c:	469e      	mov	lr, r3
 8003e9e:	4770      	bx	lr

08003ea0 <_fini>:
 8003ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea2:	bf00      	nop
 8003ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ea6:	bc08      	pop	{r3}
 8003ea8:	469e      	mov	lr, r3
 8003eaa:	4770      	bx	lr
